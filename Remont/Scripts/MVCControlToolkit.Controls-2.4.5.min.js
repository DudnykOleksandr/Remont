/* ****************************************************************************
* MVCControlToolkit.Controls-2.4.0.js
* Copyright (c) Francesco Abbruzzese. All rights reserved.
* francesco@dotnet-programming.com
* http://www.dotnet-programming.com/
* 
* This software is subject to the the license at http://mvccontrolstoolkit.codeplex.com/license  
* and included in the license.txt file of this distribution.
* 
* You must not remove this notice, or any other, from this software.
*
* ***************************************************************************/
Array.prototype.remove = function (c, b) { var a = this.slice((b || c) + 1 || this.length); this.length = c < 0 ? this.length + c : c; return this.push.apply(this, a) }; function MvcControlsToolkit_Trim(a) { return a.replace(/^\s+|\s+$/g, "") } function MvcControlsToolkit_DateTimeToDate(a) { if (!a) { return a } if (a.getTime() > new Date(a.getFullYear(), a.getMonth(), a.getDate(), 11, 59, 59, 999).getTime()) { a.setDate(a.getDate() + 1) } a.setHours(0); a.setMinutes(0); a.setSeconds(0); a.setMilliseconds(0); return a } function GlobalEvalScriptInElementId(d) { var c = ""; if (d.tagName == "SCRIPT") { c = d.text } else { var a = $(d).find("script"); for (var b = 0; b < a.length; b++) { c += a[b].text } } jQuery.globalEval(c) } function GlobalEvalScriptAndDestroy(b) { var a = CollectScriptAndDestroy(b); jQuery.globalEval(a) } function CollectScriptAndDestroy(d) { var c = ""; if (d.tagName == "SCRIPT") { c = d.text; $(d).remove() } else { var a = $(d).find("script"); for (var b = 0; b < a.length; b++) { c += a[b].text } a.remove() } return c } function GlobalEvalScriptInElementIdById(d) { var a = $("#" + d).find("script"); var c = ""; for (var b = 0; b < a.length; b++) { c += a[b].text } jQuery.globalEval(c) } function CollectAllScriptsInelement(d) { var a = $("#" + d).find("script"); var c = ""; for (var b = 0; b < a.length; b++) { c += a[b].text } return c } (function (g) { var h = /^[\],:{}\s]*$/; var m = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g; var l = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g; var d = /(?:^|:|,)(?:\s*\[)+/g; var a = /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:[.,]\d+)?(Z|(?:[-+]\d+)?)/i; var e = /\/Date\((\d+)(?:[-+]\d+)?\)\//i; var f = /"(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})(?:[.,](\d+))?(Z|(?:[-+]\d+)?)"/i; var k = /"\\\/Date\((\d+)(?:[-+]\d+)?\)\\\/"/i; var j = (window.JSON && window.JSON.parse) ? true : false; var b = j && window.JSON.parse('{"x":9}', function (o, n) { return "Y" }) === "Y"; var c = function (o, p) { if (typeof (p) === "string") { if (a.test(p)) { var n = new Date(p); if (isNaN(n)) { if (p.charAt(p.length - 1) == "Z") { return new Date(p.substring(0, p.length - 1)) } else { return new Date(p + "Z") } } else { return n } } if (e.test(p)) { return new Date(parseInt(e.exec(p)[1], 10)) } } return p }; g.extend({ parseJSON: function (o) { var n = true; if (typeof o !== "string" || !o) { return null } o = g.trim(o); if (h.test(o.replace(m, "@").replace(l, "]").replace(d, ""))) { if (b || (j && n !== true)) { return window.JSON.parse(o, n === true ? c : undefined) } else { o = n === true ? o.replace(f, "new Date(parseInt('$1',10),parseInt('$2',10)-1,parseInt('$3',10),parseInt('$4',10),parseInt('$5',10),parseInt('$6',10),(function(s){return parseInt(s,10)||0;})('$7'))").replace(k, "new Date($1)") : o; return (new Function("return " + o))() } } else { g.error("Invalid JSON: " + o) } } }) })(jQuery); function MvcControlsToolkit_RefreshWidget(b) { jElement = $(b); var a = jElement.attr("data-refresh") || ""; if (a == "") { return } try { $(b)[a]("refresh") } catch (c) { } } function MvcControlsToolkit_FormContext$_isElementInHierarchy(a, b) { if (b == null) { return false } while (b) { if (a === b) { return true } b = b.parentNode } return false } var ValidationType_StandardClient = "StandardClient"; var ValidationType_UnobtrusiveClient = "UnobtrusiveClient"; var ValidationType_Server = "Server"; function MvcControlsToolkit_Validate(g, b) { if (b == ValidationType_StandardClient) { if (typeof document.getElementById(g)[MvcControlsToolkit_FieldContext_Tag] === "undefined") { return true } var f = null; try { f = document.getElementById(g)[MvcControlsToolkit_FieldContext_Tag].validate("blur") } catch (d) { } if (f && f.length) { return false } else { return true } } else { if (b == ValidationType_UnobtrusiveClient) { var a = "#" + g; var c = true; try { c = $(a).parents("form").validate().element(a) } catch (d) { } return c } } return true } function MvcControlsToolkit_FormIsValid(d, a) { if (a == ValidationType_StandardClient) { var b = null; $("#" + d).parents("form").each(function (e) { b = this[MvcControlsToolkit_FieldContext_formValidationTag] }); if (b == null) { return true } var c = b.validate("submit"); if (c && c.length) { return false } else { return true } } else { if (a == ValidationType_UnobtrusiveClient) { return $("#" + d).parents("form").validate().form() } else { return true } } } var MvcControlsToolkit_FieldContext_hasValidationFiredTag = "__MVC_HasValidationFired"; var MvcControlsToolkit_FieldContext_formValidationTag = "__MVC_FormValidation"; var MvcControlsToolkit_FieldContext_Tag = "__MVC_FieldContext"; var MvcControlsToolkit_SpecialFormName = "_Template_Data_"; if (typeof $ !== "undefined" && $ !== null && typeof $.validator !== "undefined" && $.validator !== null && typeof $.validator.unobtrusive !== "undefined" && $.validator.unobtrusive !== null) { (function (c) { var a = c.validator; a.prototype._originalFormValidation = a.prototype._oldFormValidation || a.prototype.form; var b = function () { var e = c(this.currentForm).find("input[data-element-type='TypedTextBox']"); e.data("_was_hit_", true); var d = this._originalFormValidation(); e.trigger("pblur"); return d }; if (a.prototype._oldFormValidation) { a.prototype._oldFormValidation = b } else { a.prototype.form = b } c.validator.takeDynamicValue = function (h, o) { if (h == null) { return null } var e = h.name; var j = e.lastIndexOf("."); if (j >= 0) { var l = e.substring(j + 1); var f = h.id; f = f.substring(0, f.lastIndexOf(l)); o = f + o } var g = document.getElementById(o); if (g == null) { return null } var k = false; var n = jQuery.data(h, "_dependsOn"); if (typeof n == "undefined" || n == null) { n = new Array(); n[o] = g; jQuery.data(h, "_dependsOn", n); k = true } else { if (typeof n[o] === "undefined") { n[o] = g; k = true } } if (k) { var d = c(h); var m = function () { if (d.attr("data-elementispart")) { var p = c("#" + h.id + "_hidden"); if (p.data("_vstack")) { return } d.trigger("pfocus"); d.trigger("pblur"); p.trigger("pfocus"); p.data("_vstack", true); p.trigger("pblur"); p.removeData("_vstack") } else { d.parents("form").first().validate().element(h) } }; c(g).blur(m); c(g).bind("vblur", m) } if (c(g).attr("data-element-type") == "native") { return MvcControlsToolkit_native_GetString(g, true) } return g.value }; c.validator.unobtrusive.clearAndParse = function (d) { var e = c(d).parents("form"); if (e.length != 0) { e.removeData("validator") } else { c(d).removeData("validator") } c.validator.unobtrusive.parse(d) }; c.validator.unobtrusive.reParse = function (d) { c.validator.unobtrusive.clearAndParse(d); MvcControlsToolkit_ParseRegister.parse(d) }; c.validator.unobtrusive.parseExt = function (d) { c.validator.unobtrusive.parse(d); var g = c(d).first().closest("form"); var f = g.data("unobtrusiveValidation"); if (!f) { return } var e = g.validate(); c.each(f.options.rules, function (j, h) { if (e.settings.rules[j] == undefined) { var k = {}; c.extend(k, h); k.messages = f.options.messages[j]; c('[name= "' + j + '"]').rules("add", k) } else { c.each(h, function (n, m) { if (e.settings.rules[j][n] == undefined) { var l = {}; l[n] = m; l.messages = f.options.messages[j][n]; c('[name= "' + j + '"]').rules("add", l) } }) } }); MvcControlsToolkit_ParseRegister.parse(d) } })($); $.validator.unobtrusive.adapters.addBool("mandatory", "required"); $.validator.addMethod("dynamicrange", function (d, b, f) { var c = f[0]; if (c == "") { c = null } var e = f[1]; if (e == "") { e = null } if ((!d || !d.length) && this.optional(b)) { return true } if ($(b).attr("data-element-type") == "native") { d = MvcControlsToolkit_native_GetString(b, true) } var a = null; if (typeof jQuery.global !== "undefined" && typeof jQuery.global.parseFloat === "function") { a = jQuery.global.parseFloat(d) } else { a = parseFloat(d) } if (!isNaN(a) && (c == null || c <= a) && (e == null || a <= e)) { return true } return false }, "value is not in the required range"); jQuery.validator.unobtrusive.adapters.add("dynamicrange", ["min", "max"], function (b) { var c = b.params.min, a = b.params.max; b.rules.dynamicrange = [c, a]; if (b.message) { b.messages.dynamicrange = b.message } }); $.validator.addMethod("clientdynamirange", function (m, h, e) { var f = e[0]; if (f == "") { f = null } var a = e[2]; if (a == "") { a = null } var g = e[1]; if (g == "") { g = null } var c = e[3]; if (c == "") { c = null } var l = null; var k = null; if (g != null) { g = parseFloat(g) } if (c != null) { c = parseFloat(c) } if ((!m || !m.length) && this.optional(h)) { return true } if ($(h).attr("data-element-type") == "native") { m = MvcControlsToolkit_native_GetString(h, true) } var b = null; if (typeof jQuery.global !== "undefined" && typeof jQuery.global.parseFloat === "function") { b = jQuery.global.parseFloat(m) } else { b = parseFloat(m) } if (f != null) { var j = $.validator.takeDynamicValue(h, f); if (j != null) { l = null; if (typeof jQuery.global !== "undefined" && typeof jQuery.global.parseFloat === "function") { l = jQuery.global.parseFloat(j) } else { l = parseFloat(j) } if (isNaN(l)) { l = null } else { if (g != null) { l = l + g } } } } if (a != null) { var d = $.validator.takeDynamicValue(h, a); if (d != null) { k = null; if (typeof jQuery.global !== "undefined" && typeof jQuery.global.parseFloat === "function") { k = jQuery.global.parseFloat(d) } else { k = parseFloat(d) } if (isNaN(k)) { k = null } else { if (c != null) { k = k + c } } } } if (!isNaN(b) && (l == null || l <= b) && (k == null || b <= k)) { return true } return false }, "value is not in the required range"); jQuery.validator.unobtrusive.adapters.add("clientdynamirange", ["min", "mindelay", "max", "maxdelay"], function (a) { var b = a.params.min, c = a.params.mindelay; max = a.params.max, maxdelay = a.params.maxdelay; a.rules.clientdynamirange = [b, c, max, maxdelay]; if (a.message) { a.messages.clientdynamirange = a.message } }); $.validator.addMethod("globalizeddate", function (c, b, d) { if ((!c || !c.length) && this.optional(b)) { return true } if ($(b).attr("data-element-type") == "native") { c = MvcControlsToolkit_native_GetString(b, true) } var a = null; if (typeof jQuery.global !== "undefined" && typeof jQuery.global.parseFloat === "function") { a = new Date(c); a = jQuery.global.parseDate(c) } else { a = new Date(c) } return !isNaN(a) && a != null }, "field must be a date/time"); $.validator.addMethod("daterange", function (value, element, param) { var minValue = param[0]; if (minValue == "") { minValue = null } var maxValue = param[1]; if (maxValue == "") { maxValue = null } if (minValue != null) { minValue = (minValue + "").charAt(0) == "/" ? eval("new " + minValue.substring(1, minValue.length - 1)) : new Date(minValue) } if (maxValue != null) { maxValue = (maxValue + "").charAt(0) == "/" ? eval("new " + maxValue.substring(1, maxValue.length - 1)) : new Date(maxValue) } if ((!value || !value.length) && this.optional(element)) { return true } if ($(element).attr("data-element-type") == "native") { value = MvcControlsToolkit_native_GetString(element, true) } var convertedValue = null; if (typeof jQuery.global !== "undefined" && typeof jQuery.global.parseFloat === "function") { convertedValue = new Date(value); convertedValue = jQuery.global.parseDate(value) } else { convertedValue = new Date(value) } if (!isNaN(convertedValue) && (minValue == null || minValue <= convertedValue) && (maxValue == null || convertedValue <= maxValue)) { return true } return false }, "date is not in the required range"); jQuery.validator.unobtrusive.adapters.add("daterange", ["min", "max"], function (b) { var c = b.params.min, a = b.params.max; b.rules.daterange = [c, a]; if (b.message) { b.messages.daterange = b.message } }); $.validator.addMethod("clientdynamicdaterange", function (m, h, e) { var f = e[0]; if (f == "") { f = null } var a = e[2]; if (a == "") { a = null } var g = e[1]; if (g == "") { g = null } var c = e[3]; if (c == "") { c = null } var l = null; var k = null; if (g != null) { g = parseInt(g) } if (c != null) { c = parseInt(c) } if ((!m || !m.length) && this.optional(h)) { return true } if ($(h).attr("data-element-type") == "native") { m = MvcControlsToolkit_native_GetString(h, true) } var b = null; if (typeof jQuery.global !== "undefined" && typeof jQuery.global.parseFloat === "function") { b = jQuery.global.parseDate(m) } else { b = parseDate(m) } if (f != null) { var j = $.validator.takeDynamicValue(h, f); if (j != null) { l = null; if (typeof jQuery.global !== "undefined" && typeof jQuery.global.parseFloat === "function") { l = jQuery.global.parseDate(j) } else { l = parseDate(j) } if (isNaN(l)) { l = null } else { if (g != null) { l = new Date(l.getTime() + g) } } } } if (a != null) { var d = $.validator.takeDynamicValue(h, a); if (d != null) { k = null; if (typeof jQuery.global !== "undefined" && typeof jQuery.global.parseFloat === "function") { k = jQuery.global.parseDate(d) } else { k = parseDate(d) } if (isNaN(k)) { k = null } else { if (c != null) { k = new Date(k.getTime() + c) } } } } if (!isNaN(b) && (l == null || l <= b) && (k == null || b <= k)) { return true } return false }, "date is not in the required range"); jQuery.validator.unobtrusive.adapters.add("clientdynamicdaterange", ["min", "mindelay", "max", "maxdelay"], function (a) { var b = a.params.min, c = a.params.mindelay; max = a.params.max, maxdelay = a.params.maxdelay; a.rules.clientdynamicdaterange = [b, c, max, maxdelay]; if (a.message) { a.messages.clientdynamicdaterange = a.message } }); jQuery.validator.unobtrusive.adapters.add("globalizeddate", [], function (a) { a.rules.globalizeddate = []; if (a.message) { a.messages.globalizeddate = a.message } }) } function Setup_Ajax_ClientValidation(d, a) { if (a == ValidationType_StandardClient) { var e = window.mvcClientValidationMetadata; if (e) { for (var b = 0; b < e.length; b++) { var c = e[b]; c.FormId = d } } Sys.Mvc.FormContext._Application_Load() } else { if (typeof $ !== "undefined" && $ !== null && typeof $.validator !== "undefined" && $.validator !== null && typeof $.validator.unobtrusive !== "undefined" && $.validator.unobtrusive !== null) { $.validator.unobtrusive.clearAndParse("#" + d) } } MvcControlsToolkit_ParseRegister.parse("#" + d) } var DualSelect_Separator = ";;;"; var DualSelect_SelectAvial = "_AvialSelect"; var DualSelect_SelectSelected = "_SelSelect"; var DualSelect_HiddenSelectedItemsVal = ""; var DualSelect_Postfix = "___PackedValue"; var DualSelect_AvailableFilter = "_AvailableFilter"; var DualSelect_SelectedFilter = "_SelectedFilter"; var DualSelect_TempObjSource, DualSelect_TempObjDestination; function MvcControlsToolkit_SubstringRating(h, a) { h = h.toLowerCase(); a = a.toLowerCase(); var c = -true; var b = 0; var f = 0; for (var e = 0; e < h.length; e++) { if (a == "") { return [f, b] } var g = h.charAt(e); var d = a.indexOf(g); if (d == -1) { continue } f++; if (c) { b += d; c = false } else { b += d * 1000 } if (d + 1 < a.length) { a = a.substr(d + 1) } else { a = "" } } return [f, b] } function DualSelect_FilterInit(b, a) { $("#" + b + (a ? DualSelect_SelectedFilter : DualSelect_AvailableFilter)).keydown(function () { var c = this; var d = MvcControlsToolkit_Trim($(c).val()); setTimeout(function () { var h = document.getElementById(b + (a ? DualSelect_SelectSelected : DualSelect_SelectAvial)); var e = MvcControlsToolkit_Trim($(c).val()); if (d == e) { return } d = e; if (e == "") { return } var g = []; for (var f = 0; f < h.length; f++) { g.push({ rating: MvcControlsToolkit_SubstringRating(e, $(h[f]).text()), item: h[f] }) } g.sort(function (k, j) { if (k.rating[0] > j.rating[0]) { return -1 } if (j.rating[0] > k.rating[0]) { return 1 } if (k.rating[1] < j.rating[1]) { return -1 } if (j.rating[1] < k.rating[1]) { return 1 } return 0 }); h.options.length = 0; for (var f = 0; f < g.length; f++) { h.options.add(g[f].item) } if (a) { DualSelect_SaveSelection(b) } }) }) } function DualSelect_SetObjects(b, a) { if (a) { DualSelect_TempObjSource = document.getElementById(b + DualSelect_SelectAvial); DualSelect_TempObjDestination = document.getElementById(b + DualSelect_SelectSelected) } else { DualSelect_TempObjSource = document.getElementById(b + DualSelect_SelectSelected); DualSelect_TempObjDestination = document.getElementById(b + DualSelect_SelectAvial) } } function DualSelect_GetIndexForInsert(b, c) { if (b.autosort == "false") { return b.length + 1 } if (b.length == 0) { return 0 } for (var a = 0; a < b.length; a++) { if (b[a].text > c.text) { return a } } return b.length } function DualSelect_MoveElement(e, c) { DualSelect_SetObjects(e, c); var a = $("#" + e.substring(0, e.lastIndexOf("___"))); if (DualSelect_TempObjSource.length == 0) { return } iLast = 0; for (var d = 0; d < DualSelect_TempObjSource.length; d++) { if (DualSelect_TempObjSource[d].selected) { iLast = d; var f = DualSelect_TempObjSource[d]; var b = new MvcControlsToolkit_changeData(f, c ? "ItemCreating" : "ItemDeleting", 0); a.trigger("itemChange", b); if (b.Cancel == true) { continue } DualSelect_TempObjSource.remove(d); nPos = (DualSelect_TempObjDestination.length + 1); DualSelect_TempObjDestination.options.add(f, DualSelect_GetIndexForInsert(DualSelect_TempObjDestination, f)); b = new MvcControlsToolkit_changeData(f, c ? "ItemCreated" : "ItemDeleted", 0); a.trigger("itemChange", b); d-- } } DualSelect_SaveSelection(e); if (DualSelect_TempObjSource.length > 0 && iLast == 0) { DualSelect_TempObjSource.selectedIndex = 0 } else { if (DualSelect_TempObjSource.length - 1 >= iLast) { DualSelect_TempObjSource.selectedIndex = iLast } else { if (DualSelect_TempObjSource.length >= 1) { DualSelect_TempObjSource.selectedIndex = iLast - 1 } } } DualSelect_ClearSelection(DualSelect_TempObjSource); DualSelect_TempObjSource.focus; a.trigger("DualSelect_Changed") } function DualSelect_Move_Up(g, c) { DualSelect_SetObjects(g, c); var a = $("#" + g.substring(0, g.lastIndexOf("___"))); if (DualSelect_TempObjSource.length == 0) { return } if (DualSelect_TempObjSource[0].selected) { return } for (var d = 1; d < DualSelect_TempObjSource.length; d++) { if (DualSelect_TempObjSource[d].selected) { var f = DualSelect_TempObjSource[d]; var b = new MvcControlsToolkit_changeData(f, "ItemMoving", 1); a.trigger("itemChange", b); if (b.Cancel == true) { continue } var e = DualSelect_TempObjSource[d - 1]; DualSelect_TempObjSource.remove(d); DualSelect_TempObjSource.remove(d - 1); DualSelect_TempObjSource.options.add(f, d - 1); DualSelect_TempObjSource.options.add(e, d); b = new MvcControlsToolkit_changeData(f, "ItemMoved", 1); a.trigger("itemChange", b); d-- } } DualSelect_SaveSelection(g); a.trigger("DualSelect_Changed") } function DualSelect_Move_Down(g, c) { DualSelect_SetObjects(g, c); var a = $("#" + g.substring(0, g.lastIndexOf("___"))); if (DualSelect_TempObjSource.length == 0) { return } if (DualSelect_TempObjSource[DualSelect_TempObjSource.length - 1].selected) { return } for (var d = DualSelect_TempObjSource.length - 2; d > -1; d--) { if (DualSelect_TempObjSource[d].selected) { var f = DualSelect_TempObjSource[d]; var b = new MvcControlsToolkit_changeData(f, "ItemMoving", -1); a.trigger("itemChange", b); if (b.Cancel == true) { continue } var e = DualSelect_TempObjSource[d + 1]; DualSelect_TempObjSource.remove(d + 1); DualSelect_TempObjSource.remove(d); DualSelect_TempObjSource.options.add(e, d); DualSelect_TempObjSource.options.add(f, d + 1); b = new MvcControlsToolkit_changeData(f, "ItemMoved", -1); a.trigger("itemChange", b); d++ } } DualSelect_SaveSelection(g); a.trigger("DualSelect_Changed") } function DualSelect_MoveAll(e, d, b) { DualSelect_SetObjects(e, d); var a = $("#" + e.substring(0, e.lastIndexOf("___"))); var f = 0; while (DualSelect_TempObjSource.length > f) { oNode = DualSelect_TempObjSource[f]; if (b != true) { var c = new MvcControlsToolkit_changeData(oNode, d ? "ItemCreating" : "ItemDeleting", 0); a.trigger("itemChange", c); if (c.Cancel == true) { f++; continue } } DualSelect_TempObjSource.remove(oNode); DualSelect_TempObjDestination.options.add(oNode, DualSelect_GetIndexForInsert(DualSelect_TempObjDestination, oNode)); if (b != true) { var c = new MvcControlsToolkit_changeData(oNode, d ? "ItemCreated" : "ItemDeleted", 0); a.trigger("itemChange", c) } } DualSelect_SaveSelection(e); if (b != true) { a.trigger("DualSelect_Changed") } } function DualSelect_ClearSelection(b) { for (var a = 0; a < b.length; a++) { b[a].selected = false } } function DualSelect_SaveSelection(d) { var b = document.getElementById(d + DualSelect_SelectSelected); var c = ""; var e = ""; for (var a = 0; a < b.length; a++) { c += b[a].value + DualSelect_Separator } document.getElementById(d + DualSelect_HiddenSelectedItemsVal).value = c } function MvcControlsToolkit_DualSelect_Set(o, a, h, f) { var c = document.getElementById(o.id + DualSelect_Postfix + DualSelect_SelectAvial); var p = document.getElementById(o.id + DualSelect_Postfix + DualSelect_SelectSelected); if (c == null || p == null) { setTimeout(function () { MvcControlsToolkit_DualSelect_Set(o, a, h, f) }, 0); return } var g = $(o).attr("data-item-type"); if (g) { g = parseInt(g) } f = g || f; DualSelect_MoveAll(o.id + DualSelect_Postfix, false, true); if (a instanceof Array && c.options.length > 0) { var t = new Array(); for (var m = 0, k = c.length; m < k; m++) { t.push(MvcControlsToolkit_Parse(c.options[m].value, f)); c.options[m].selected = false } for (var m = 0, b = a.length; m < b; m++) { if (f == MvcControlsToolkit_DataType_Float) { var e = 0; var s = Math.abs(a[m] - t[0]); for (var k = 1, d = t.length; k < d; k++) { if (Math.abs(t[k] - a[m]) < s) { e = k; s = Math.abs(t[k] - a[m]) } } if (e >= 0) { var q = c.options[e]; c.options.remove(e); t.remove(e); p.options.add(q) } } else { for (var k = 0, d = t.length; k < d; k++) { if (t[k] === a[m]) { var q = c.options[k]; c.options.remove(k); t.remove(k); p.options.add(q); break } } } } DualSelect_SaveSelection(o.id + DualSelect_Postfix) } } function MvcControlsToolkit_DualSelect_SetString(a, b) { MvcControlsToolkit_DualSelect_Set(a, b, null, MvcControlsToolkit_DataType_String) } function MvcControlsToolkit_DualSelect_Get(c, g) { var f = $(c).attr("data-item-type"); if (f) { f = parseInt(f) } g = f || g; var d = document.getElementById(c.id + DualSelect_Postfix + DualSelect_SelectSelected); if (d == null) { setTimeout(function () { MvcControlsToolkit_DualSelect_Get(c, g) }, 0); return } var e = new Array(); for (var b = 0, a = d.length; b < a; b++) { e.push(MvcControlsToolkit_Parse(d.options[b].value, g)) } return e } function MvcControlsToolkit_DualSelect_GetString(a) { return MvcControlsToolkit_DualSelect_Get(a, MvcControlsToolkit_DataType_String) } function MvcControlsToolkit_changeData(b, a, c) { this.ItemChanged = b; this.ChangeType = a; this.Data = c } MvcControlsToolkit_changeData.prototype = { ItemChanged: null, ChangeType: null, Data: null, Cancel: false }; var ManipulationButtonRemove = "ManipulationButtonRemove"; var ManipulationButtonHide = "ManipulationButtonHide"; var ManipulationButtonShow = "ManipulationButtonShow"; var ManipulationButtonResetGrid = "ManipulationButtonResetGrid"; var ManipulationButtonCustom = "ManipulationButtonCustom"; function ManipulationButton_Click(target, dataButtonType) { if (dataButtonType == ManipulationButtonCustom) { if (typeof target === "string") { eval(target) } else { target() } return } if (dataButtonType == ManipulationButtonRemove) { $("#" + target).remove() } else { if (dataButtonType == ManipulationButtonHide) { $("#" + target).css("visibility", "hidden") } else { if (dataButtonType == ManipulationButtonShow) { $("#" + target).css("visibility", "visible") } else { if (dataButtonType == ManipulationButtonResetGrid) { var toUndo = eval(target + AllNormalPostfix); if (toUndo != null) { for (var i = 0; i < toUndo.length; i++) { var vChanged = toUndo[i].substring(0, toUndo[i].lastIndexOf("_")) + ChandedPostfix; var deleted = eval(toUndo[i] + DeletedPostFix); if (deleted != null && deleted == true) { DataButton_Click(toUndo[i], vChanged, DataButtonUndelete) } else { DataButton_Click(toUndo[i], vChanged, DataButtonCancel) } } } } } } } } function MvcControlsToolkit_Button_AdjustText(a, c) { var b = document.getElementById(a); var d = b.nodeName.toLowerCase(); if (d == "input") { b.value = c } else { if (d == "img") { b.setAttribute("src", c) } else { if (d == "a") { b.firstChild.nodeValue = c } } } } function PageButton_Click(d, c, e, b, a) { if (e == "") { if (!MvcControlsToolkit_FormIsValid(d, a)) { return } var f = document.getElementById(d); f.value = c; $("#" + d).parents("form").submit() } else { if (b != "") { $.ajax({ type: "GET", url: e, success: function (g) { $("#" + b).html(g) } }) } else { window.location.href = e } } } function MvcControlsToolkit_RefreshPager(d) { var c = function (h, l) { if (!l || l == "curr") { if (l == "curr") { h.attr("data-selected-page", "selected") } else { h.attr("disabled", "disabled"); if (h[0].tagName.toLowerCase() == "img") { var j = h.attr("data-enabled-src") || ""; if (j != "") { h.attr("src") = j } } } h.attr("data-no-click", true) } else { h.removeAttr("disabled"); h.removeAttr("data-selected-page"); if (h[0].tagName.toLowerCase() == "img") { var k = h.attr("data-disabled-src") || ""; if (k != "") { h.attr("src") = k } } h.removeAttr("data-no-click") } }; var b = $("#" + d); var a = parseInt(b.val()); var f = b.attr("data-total-pages") || ""; if (f != "") { f = parseInt(f) } if (a < 1) { a = 1 } var e = b.attr("data-page-prefix") || ""; var g = b.attr("data-page-postfix") || ""; MvcControlsToolkit_TypedTextBox_SetById(d + "_goto", a, null, 1); $("." + d + "_class").each(function () { var k = $(this); var j = k.attr("data-pager-button"); if (j == "PageButtonFirst" || j == "PageButtonPrevious") { if (a == 1) { c(k, false) } else { c(k, true) } } else { if (j == "PageButtonNext") { if (f != "" && a >= f) { c(k, false) } else { c(k, true) } } else { if (j == "PageButtonLast") { if (f == "" || a >= f) { c(k, false) } else { c(k, true) } } else { if (j == "PageButtonPage") { var h = parseInt(k.attr("data-pager-index")); if (a + h < 1 || (f != "" && a + h > f)) { k.parent().hide() } else { k.text(e + (a + h) + g); k.parent().show(); if (h == 0) { c(k, "curr") } else { c(k, true) } } } } } } b.trigger("pagerRefreshed") }) } function MvcControlsToolkit_InitJsonPager(a) { $(document).ready(function () { var c = $("#" + a); var e = (c.attr("data-cause-submit") || "") != ""; var b = c.attr("data-validation-type") || ""; $("." + a + "_class").click(function () { var s = $(this); if ((s.attr("data-no-click") || false)) { return false } var m = s.attr("data-pager-button"); var k = c.val(); if (!e || MvcControlsToolkit_FormIsValid(a, b)) { if (m == "PageButtonFirst") { c.val(1); c.trigger("ClientPager_Changed") } else { if (m == "PageButtonPrevious") { var n = parseInt(c.val()); c.val(n - 1); c.trigger("ClientPager_Changed") } else { if (m == "PageButtonNext") { var n = parseInt(c.val()); c.val(n + 1); c.trigger("ClientPager_Changed") } else { if (m == "PageButtonLast") { var q = c.attr("data-total-pages") || ""; if (q != "") { c.val(parseInt(q)); c.trigger("ClientPager_Changed") } } else { if (m == "PageButtonPage") { var n = parseInt(c.val()); var l = parseInt(s.attr("data-pager-index")); c.val(n + l); c.trigger("ClientPager_Changed") } else { if (m == "PageButtonGoTo") { var q = c.attr("data-total-pages") || ""; if (q != "") { q = parseInt(q) } var t = MvcControlsToolkit_TypedTextBox_GetById(a + "_goto", 1); if (t < 1) { t = 1 } else { if (q != "" && t > q) { t = q } } c.val(t); c.trigger("ClientPager_Changed") } } } } } } } MvcControlsToolkit_RefreshPager(a); var q = c.attr("data-total-pages") || ""; if (q != "") { q = parseInt(q) } var j = { type: "page", submit: e, page: parseInt(c.val()), pager: c, previousPage: parseInt(k), totalPages: q }; var h = c.attr("data-client-model") || ""; var o = c.attr("data-page-size") || ""; var p = c.attr("data-page-size-id"); if (h != "" && o != "") { j.pageSizeObservable = mvcct.utils.property(ko.dataFor(c[0]), o); j.itemsPerPage = ko.utils.unwrapObservable(j.pageSizeObservable) } else { if (p) { j.itemsPerPage = MvcControlsToolkit_TypedTextBox_GetById(p, MvcControlsToolkit_DataType_Int); if (isNaN(j.itemsPerPage)) { j.itemsPerPage = null } } } c.trigger("queryChanged", j); if (j.submit) { c.parents("form").first().submit() } }); var g = c.attr("data-client-model") || ""; var d = c.attr("data-total-pages-name") || ""; if (g != "" && d != "") { var f = new ko.dependentObservable(function () { var h = ko.utils.unwrapObservable(mvcct.utils.property(ko.dataFor(c[0]), d)); var j = parseInt(c.val()); if (j > h) { j = h; if (j == 0) { j = 1 } c.val(j); c.trigger("ClientPager_Changed") } c.attr("data-total-pages", h + ""); MvcControlsToolkit_RefreshPager(a) }, null, { disposeWhenNodeIsRemoved: c[0] }); c.data("__mvcct_totalpagesDependency__", f) } MvcControlsToolkit_RefreshPager(a) }) } function MvcControlsToolkit_NewPage(c, d, b) { var a = $("#" + c); a.val(d); a.attr("data-total-pages", b); MvcControlsToolkit_RefreshPager(c) } function MvcControlsToolkit_ClientPager_Get(a, b) { return parseInt($(a).val()) } function MvcControlsToolkit_ClientPager_GetString(a) { return $(a).val() } function MvcControlsToolkit_ClientPager_GetById(b, a) { return parseInt($("#" + b).val()) } function MvcControlsToolkit_ClientPager_Set(b, a, c, d) { $(b).val(a); MvcControlsToolkit_RefreshPager(b.id) } function MvcControlsToolkit_ClientPager_SetById(d, a, b, c) { $("#" + d).val(a); MvcControlsToolkit_RefreshPager(d) } function MvcControlsToolkit_ClientPager_SetString(b, a) { $(b).val(a); MvcControlsToolkit_RefreshPager(b.id) } function MvcControlsToolkit_ClientPager_BindChange(b, a) { $("#" + b).bind("ClientPager_Changed", a) } function MvcControlsToolkit_ClientPager_UnbindChange(b, a) { $("#" + b).unbind("ClientPager_Changed", a) } function _inner_Sort_Handler(field, buttonName, initialize, causePostback, clientOrderChanged, sortField, pageField, cssNoSort, cssAscending, cssDescending, validationType, oneColumnSorting) { if (!initialize && causePostback && !MvcControlsToolkit_FormIsValid(sortField, validationType)) { return } var order = $("#" + sortField).val(); var hasAscending = order.indexOf(" " + field + "#+;"); var hasDescending = order.indexOf(" " + field + "#-;"); var prevOrder = ""; var actualOrder = ""; if (!initialize) { if (hasDescending >= 0) { if (oneColumnSorting) { order = order.replace(" " + field + "#-;", " " + field + "#+;") } else { order = order.replace(" " + field + "#-;", "") } $("#" + sortField).val(order); $("#" + buttonName).removeClass(cssDescending); if (oneColumnSorting) { $("#" + buttonName).addClass(cssAscending) } else { $("#" + buttonName).addClass(cssNoSort) } prevOrder = "-" } else { if (hasAscending >= 0) { order = order.replace(" " + field + "#+;", " " + field + "#-;"); $("#" + sortField).val(order); $("#" + buttonName).removeClass(cssAscending); $("#" + buttonName).addClass(cssDescending); prevOrder = "+"; actualOrder = "-" } else { if (oneColumnSorting) { order = " " + field + "#+;" } else { order = order + " " + field + "#+;" } $("#" + sortField).val(order); $("#" + buttonName).removeClass(cssNoSort); $("#" + buttonName).addClass(cssAscending); actualOrder = "+"; if (oneColumnSorting) { var prevButton = $("#" + sortField).data("_prevbutton_"); if (prevButton != "" && prevButton != buttonName) { $("#" + prevButton).removeClass(cssDescending).removeClass(cssAscending).addClass(cssNoSort) } $("#" + sortField).data("_prevbutton_", buttonName) } } } if (pageField != null) { $("#" + pageField).val("1") } if (clientOrderChanged != null) { eval(clientOrderChanged + "('" + field + "', '" + prevOrder + "', '" + actualOrder + "')") } if (causePostback) { $("#" + sortField).parents("form").submit() } } else { if (hasDescending >= 0) { $("#" + buttonName).removeClass(cssDescending + " " + cssAscending + " " + cssNoSort).addClass(cssDescending); if (oneColumnSorting) { $("#" + sortField).data("_prevbutton_", buttonName) } } else { if (hasAscending >= 0) { $("#" + buttonName).removeClass(cssDescending + " " + cssAscending + " " + cssNoSort).addClass(cssAscending); if (oneColumnSorting) { $("#" + sortField).data("_prevbutton_", buttonName) } } else { $("#" + buttonName).removeClass(cssDescending + " " + cssAscending + " " + cssNoSort).addClass(cssNoSort) } } } } function Sort_Handler(o, s, d, g, k, l, f, h, e, j, n, m, q) { var b = $("#" + l); if (!d && g && !MvcControlsToolkit_FormIsValid(l, n)) { return } _inner_Sort_Handler(o, s, d, false, k, l, f, h, e, j, n, m); if (!d) { var c = { type: "sort", sortString: b.val(), submit: g, sorterInfos: { func: q, container: l, value: $("#" + l).val() }, page: 1 }; if (f != null) { var a = $("#" + f); MvcControlsToolkit_RefreshPager(f); a.trigger("ClientPager_Changed"); var p = a.attr("data-total-pages") || ""; if (p != "") { p = parseInt(p) } c.pageSize = p } $("#" + s).trigger("queryChanged", c); if (c.submit) { b.parents("form").first().submit() } } } function ViewList_Client(groupName, hiddenField, cssSelected, prefix) { this.CssSelected = cssSelected; this.GroupName = groupName; this.HiddenField = hiddenField; this.Prefix = prefix; var allViews = $("." + groupName); allViews.each(function (i) { var name = this.id + "_placeholder"; var thisId = this.id; $("#" + thisId).before("<span style='display:none;' id='" + name + "'></span>"); $("." + thisId + "_checkbox").click(function () { if ($("." + thisId + "_checkbox")[0].checked) { eval(groupName + "_ViewList").Select(thisId, true) } else { eval(groupName + "_ViewList").Select("", true) } }) }); this.SelectionSet = allViews.detach(); this.SelectionSet.find("script").remove() } ViewList_Client.prototype = { HiddenField: null, GroupName: null, CssSelected: null, SelectionSet: null, Prefix: null, Select: function (b, a) { $("." + this.GroupName + "_button").removeClass(this.CssSelected); $("." + this.GroupName + "_checkbox").each(function (c) { this.checked = false }); $("." + this.GroupName).detach(); if (b == "") { document.getElementById(this.HiddenField).value = ""; return } document.getElementById(this.HiddenField).value = b; if (a == null) { b = this.Prefix + b } this.SelectionSet.filter("#" + b).insertBefore("#" + b + "_placeholder"); $("." + b + "_button").addClass(this.CssSelected); $("." + b + "_checkbox").each(function (c) { this.checked = true }) } }; function ViewsOnOff_Client_Switch(groupName, on, hidden) { if (on) { $("." + groupName + "_checkbox").each(function (i) { this.checked = true }); var toAttach = eval(groupName + "_ViewsOnOff"); toAttach.each(function (i) { var currId = this.id; $(this).insertBefore("#" + currId + "_placeholder") }); document.getElementById(hidden).value = "True" } else { $("." + groupName + "_checkbox").each(function (i) { this.checked = false }); $("." + groupName).detach(); document.getElementById(hidden).value = "False" } } function ViewsOnOff_Client_Initialize(groupName, initial_on, hidden) { var allViews = $("." + groupName); allViews.each(function (i) { var prova = this.id; if (this.id == null || this.id == "") { this.id = groupName + "_el" + i } var name = this.id + "_placeholder"; var thisId = this.id; $("#" + this.id).before("<span style='display:none;' id='" + name + "'></span>"); $("." + groupName + "_checkbox").click(function (event) { ViewsOnOff_Client_Switch(groupName, event.target.checked, hidden) }) }); var selectionSet = allViews.detach(); selectionSet.find("script").remove(); eval(groupName + "_ViewsOnOff = selectionSet;"); if (initial_on) { $("." + groupName + "_checkbox").each(function (i) { this.checked = true }); selectionSet.each(function (i) { var currId = this.id; $(this).insertBefore("#" + currId + "_placeholder") }) } else { $("." + groupName + "_checkbox").each(function (i) { this.checked = false }) } } var MvcControlsToolkit_DataType_String = 0; var MvcControlsToolkit_DataType_UInt = 1; var MvcControlsToolkit_DataType_Int = 2; var MvcControlsToolkit_DataType_Float = 3; var MvcControlsToolkit_DataType_DateTime = 4; function MvcControlsToolkit_Format(c, d, a, b, e) { if (a < 0) { return c } if (c == null || c === undefined) { return "" } if (!b) { b = "" } if (!e) { e = "" } return b + MvcControlsToolkit_ToString(c, d, a) + e } function MvcControlsToolkit_FormatDisplay(d, e, b, c, f, a) { if (b < 0) { return d } if (d == null || d === "" || d === undefined) { return a } return c + MvcControlsToolkit_ToString(d, e, b) + f } function MvcControlsToolkit_ToString(b, c, a) { if (b === undefined) { return undefined } if (a == MvcControlsToolkit_DataType_String || a < 0) { if (b === true) { return "True" } if (b === false) { return "False" } return b } if (b == null) { return "" } if (c === "" || c === null || c === undefined) { if (a == MvcControlsToolkit_DataType_DateTime) { c = "d" } else { if (a == MvcControlsToolkit_DataType_Int || a == MvcControlsToolkit_DataType_UInt) { c = "d" } else { if (a == MvcControlsToolkit_DataType_Float) { c = "n" } else { return b } } } } if ((typeof jQuery !== "undefined") && (typeof jQuery.global !== "undefined") && (typeof jQuery.global.parseInt === "function")) { if (a == MvcControlsToolkit_DataType_DateTime && c == "s") { c = "S" } return jQuery.global.format(b, c) } else { if ((typeof Number !== "undefined") && (typeof Number.parseLocale === "function")) { if (a == MvcControlsToolkit_DataType_DateTime && c == "S") { c = "s" } return b.localeFormat(c) } else { return b + "" } } } function MvcControlsToolkit_Parse(c, b) { if (b == MvcControlsToolkit_DataType_String) { return c } if (c === undefined) { return undefined } if (c == "") { return null } if (b == MvcControlsToolkit_DataType_Float) { if ((typeof jQuery !== "undefined") && (typeof jQuery.global !== "undefined") && (typeof jQuery.global.parseFloat == "function")) { return jQuery.global.parseFloat(c) } else { if ((typeof Number !== "undefined") && (typeof Number.parseLocale == "function")) { return Number.parseLocale(c) } else { return parseFloat(c) } } } else { if (b == MvcControlsToolkit_DataType_DateTime) { if ((typeof jQuery !== "undefined") && (typeof jQuery.global !== "undefined") && (typeof jQuery.global.parseDate == "function")) { return jQuery.global.parseDate(c) } else { if ((typeof Date !== "undefined") && (typeof Date.parseLocale == "function")) { return Date.parseLocale(c) } else { return new Date(c) } } } else { if ((typeof jQuery !== "undefined") && (typeof jQuery.global !== "undefined") && (typeof jQuery.parseInt == "function")) { return jQuery.global.parseInt(c) } else { if (typeof Number.parseLocale == "function") { var a = Number.parseLocale(c); if (isNaN(a)) { return a } return parseInt(a + "") } else { return parseInt(c, 10) } } } } } function MvcControlsToolkit_TypedTextBox_Input(j, d, a, f, h, e, c, b) { if (f == MvcControlsToolkit_DataType_String || f == MvcControlsToolkit_DataType_DateTime || j == 0 || j == 13 || j == 9 || j == 8 || j == e.charCodeAt(0) || (j >= 48 && j <= 57)) { return true } if ((f == MvcControlsToolkit_DataType_Int || f == MvcControlsToolkit_DataType_Float) && (j == c.charCodeAt(0) || j == b.charCodeAt(0))) { var g = document.getElementById(d).value; return g.indexOf(c) < 0 && g.indexOf(b) < 0 } if (f == MvcControlsToolkit_DataType_Float && j == h.charCodeAt(0)) { var g = document.getElementById(d).value; return g.indexOf(h) < 0 } return false } function MvcControlsToolkit_FocusAtEnd(a) { var b = document.getElementById(a); if (b.setSelectionRange) { b.setSelectionRange(b.value.length, b.value.length) } else { if (this.createTextRange) { r = b.createTextRange(); r.collapse(false); r.select() } } } function MvcControlsToolkit_TypedTextBox_Focus(a, d, c) { var b = document.getElementById(a); document.getElementById(a).value = document.getElementById(d).value || ""; $(b).data("_was_focused_", true); if (c != "") { $("#" + a).removeClass(c) } } function MvcControlsToolkit_DisplayEdit_DbClick(a, b) { $("#" + b).hide(); $("#" + a).show().focus() } function MvcControlsToolkit_TypedTextBox_Init(o, n, m, l, k, j, h, g, f, e, d, c, b, a) { $(document).ready(function () { var p = $("#" + o); p.bind("pblur", function () { MvcControlsToolkit_TypedTextBox_Blur(o, n, l, f, e, d, h, g, k, j, c, m, b); return false }); p.bind("pfocus", function () { MvcControlsToolkit_TypedTextBox_Focus(o, n, m); return false }); try { p.trigger("pfocus"); MvcControlsToolkit_TypedTextBox_Blur(o, n, l, f, e, d, h, g, k, j, c, m, b, true) } catch (q) { } p.focus(function () { p.trigger("pfocus"); MvcControlsToolkit_FocusAtEnd(o); return true }); if (a != null) { p.datepicker(a) } if (a != null) { p.datepicker() } p.blur(function () { p.trigger("pblur"); return true }); p.keypress(function (s) { return MvcControlsToolkit_TypedTextBox_Input(s.which, o, n, l, k, j, h, g) }) }) } function MvcControlsToolkit_TypedTextBox_Blur(t, A, s, o, v, w, x, c, g, m, j, k, h, n) { var b = document.getElementById(t); if (b == null) { return } var a = $(b); if (!a.data("_was_focused_")) { a.trigger("pfocus") } a.removeData("_was_focused_"); var p = b.value; var q = p; if (s != MvcControlsToolkit_DataType_String && s != MvcControlsToolkit_DataType_DateTime) { p = MvcControlsToolkit_Trim(p); q = p; var f = p; f = f.replace(m, ""); tvalue = f.replace(x, ""); negative = f.indexOf(c); f = f.replace(c, ""); var z = ""; var d = ""; for (var u = 0; u < f.length; u++) { d = f.charCodeAt(u); if ((d >= 48 && d <= 57) || d == g.charCodeAt(0)) { z = z + f.charAt(u) } } f = z; if (p != "") { var l = 0; try { l = MvcControlsToolkit_Parse(f, s); if (negative >= 0) { l = l * -1 } if (!isNaN(l)) { p = MvcControlsToolkit_Format(l, w, s); if (s == MvcControlsToolkit_DataType_Float) { if (negative >= 0) { q = c + f } else { q = f } } else { q = MvcControlsToolkit_Format(l, "n0", s) } } } catch (y) { } } } if (s == MvcControlsToolkit_DataType_DateTime) { q = MvcControlsToolkit_Format(MvcControlsToolkit_Parse(q, s), w, s); p = q } document.getElementById(A).value = q; if (q) { $("#" + t).data("_was_hit_", true) } if (n == null && $("#" + t).data("_was_hit_")) { MvcControlsToolkit_Validate(A, h); $("#" + A).trigger("vblur") } $("#" + t).removeClass("input-validation-error"); if ($("#" + A).hasClass("input-validation-error")) { $("#" + t).addClass("input-validation-error") } if (p == "") { if (k != "") { $("#" + t).addClass(k) } document.getElementById(t).value = j } else { document.getElementById(t).value = o + p + v } $("#" + t).trigger("TypedTextBox_Changed") } function MvcControlsToolkit_DisplayEdit_Init(p, o, n, m, l, k, j, h, g, f, e, d, c, b, a, q) { $(document).ready(function () { var s = $("#" + p); if (b != null) { s.datepicker(b) } s.bind("pblur", function (w, v) { var u = MvcControlsToolkit_DisplayEdit_Blur(p, o, n, h, g, f, k, j, m, l, e, c, a, !d && !v, q); if (v) { v.goneDisplay = u } return false }); try { s.trigger("pblur") } catch (t) { } s.blur(function () { s.trigger("pblur"); return true }); if (d == "click") { $("#" + o).click(function () { MvcControlsToolkit_DisplayEdit_DbClick(p, o); return true }) } else { if (d == "dblclick") { $("#" + o).dblclick(function () { MvcControlsToolkit_DisplayEdit_DbClick(p, o); return true }) } } $("#" + o).bind("pedit", function () { MvcControlsToolkit_DisplayEdit_DbClick(p, o); return true }); s.keypress(function (u) { return MvcControlsToolkit_TypedTextBox_Input(u.which, p, o, n, m, l, k, j) }) }) } function MvcControlsToolkit_DisplayEdit_Blur(s, A, q, n, u, v, w, b, f, k, h, g, m, y, l) { var a = document.getElementById(s); if (a == null) { return } var o = a.value; if (m == "select") { o = $(a).find("option:selected").text() } var p = o; if (q != MvcControlsToolkit_DataType_String && q != MvcControlsToolkit_DataType_DateTime) { o = MvcControlsToolkit_Trim(o); p = o; var d = o; d = d.replace(k, ""); tvalue = d.replace(w, ""); negative = d.indexOf(b); d = d.replace(b, ""); var z = ""; var c = ""; for (var t = 0; t < d.length; t++) { c = d.charCodeAt(t); if ((c >= 48 && c <= 57) || c == f.charCodeAt(0)) { z = z + d.charAt(t) } } d = z; if (o != "") { var j = 0; try { j = MvcControlsToolkit_Parse(d, q); if (negative >= 0) { j = j * -1 } if (!isNaN(j)) { o = MvcControlsToolkit_Format(j, v, q); if (q == MvcControlsToolkit_DataType_Float) { if (negative >= 0) { p = b + d } else { p = d } } else { p = MvcControlsToolkit_Format(j, "n0", q) } } } catch (x) { } } } if (q == MvcControlsToolkit_DataType_DateTime) { p = MvcControlsToolkit_Format(MvcControlsToolkit_Parse(p, q), v, q); o = p } if (m == "select") { } else { a.value = p } if (MvcControlsToolkit_Validate(s, h) && !y) { $("#" + s).hide(); $("#" + A).show(); if (o == "") { if (g == "") { $("#" + A).html("&nbsp;&nbsp;&nbsp;") } else { $("#" + A).text(g) } if (l) { $("#" + A).attr("title", "") } } else { $("#" + A).text(n + o + u); if (l) { $("#" + A).attr("title", n + o + u) } } $("#" + s).trigger("TypedEditDisplay_Changed"); return true } else { $("#" + s).show(); $("#" + A).hide(); $("#" + s).trigger("TypedEditDisplay_Changed"); return false } } function MvcControlsToolkit_EditDisplayButton(m, f, c, h, l) { var j = $(m); var a = j.data("_editDisplayState_") || { display: false, jElements: j.parents(f).first().find("[data-element-type=TypedEditDisplay]") }; var g = j[0]; function e(o) { var n = true; o.each(function () { var p = { goneDisplay: false }; $(this).trigger("pblur", p); if (!p.goneDisplay) { n = false } }); return n } function d(p, o) { var n = p.tagName.toLowerCase(); if (n == "a") { $(p).text(o) } else { if (n == "img") { $(p).attr("src", o) } else { $(p).val(o) } } } function k(n) { n.each(function () { $("#" + $(this).attr("id") + "_display").trigger("pedit") }) } function b(o, n, p) { if (!p) { return } o.each(function () { p(this, n) }) } if (a.display) { k(a.jElements); d(g, c); a.display = false; b(a.jElements, "goneEdit", l) } else { res = e(a.jElements); if (res) { d(g, h); a.display = true; b(a.jElements, "goneDisplay", l) } else { k(a.jElements); b(a.jElements, "failedGoneEdit", l) } } $(g).data("_editDisplayState_", a) } function MvcControlsToolkit_TypedTextBox_BindChange(b, a) { $("#" + b + "_hidden").bind("TypedTextBox_Changed", a) } function MvcControlsToolkit_TypedTextBox_UnbindChange(b, a) { $("#" + b + "_hidden").unbind("TypedTextBox_Changed", a) } function MvcControlsToolkit_TypedEditDisplay_BindChange(b, a) { $("#" + b).bind("TypedEditDisplay_Changed", a) } function MvcControlsToolkit_TypedEditDisplay_UnbindChange(b, a) { $("#" + b).unbind("TypedEditDisplay_Changed", a) } function MvcControlsToolkit_TypedTextBox_SetString(b, a) { var b = $(b); b.trigger("pfocus"); b.val(a); b.trigger("pblur") } function MvcControlsToolkit_TypedInput_Load(a, b) { var b = $(b); b.trigger("pfocus"); b.val(a); b.trigger("pblur") } function MvcControlsToolkit_TypedTextBox_GetString(a) { var b = a.id.substring(0, a.id.lastIndexOf("_")); return $("#" + b).val() } function MvcControlsToolkit_TypedTextBox_Set(c, b, f, h) { var e = $(c); if (!h) { h = parseInt(e.attr("data-client-type")) } var d = c.id.substring(0, c.id.lastIndexOf("_")); var g = $("#" + d); if (g.length == 0) { var a = function () { MvcControlsToolkit_TypedTextBox_Set(c, b, f, h) }; setTimeout(a, 0); return } var b = MvcControlsToolkit_Format(b, f, h, "", ""); g.val(b); e.val(b); e.trigger("pfocus"); e.trigger("pblur") } function MvcControlsToolkit_TypedTextBox_SetById(f, a, c, e) { var b = $("#" + f + "_hidden"); if (!e) { e = parseInt(b.attr("data-client-type")) } var d = $("#" + f); var a = MvcControlsToolkit_Format(a, c, e, "", ""); d.val(a); b.val(a); b.trigger("pfocus"); b.trigger("pblur") } function MvcControlsToolkit_TypedTextBox_Get(a, c) { var b = a.id.substring(0, a.id.lastIndexOf("_")); return MvcControlsToolkit_Parse($("#" + b).val(), c) } function MvcControlsToolkit_TypedTextBox_GetById(b, a) { return MvcControlsToolkit_Parse($("#" + b).val(), a) } function MvcControlsToolkit_TypedEditDisplay_SetString(b, a) { var b = $(b); b.val(a); b.trigger("pblur") } function MvcControlsToolkit_TypedEditDisplay_GetString(a) { return $(a).val() } function MvcControlsToolkit_TypedEditDisplay_Set(b, a, d, e) { var c = $(b); if (!e) { e = parseInt(c.attr("data-client-type")) } $(b).val(MvcControlsToolkit_Format(a, d, e, "", "")); c.trigger("pblur") } function MvcControlsToolkit_TypedEditDisplay_SetById(e, a, c, d) { var b = $("#" + e); if (!d) { d = parseInt(b.attr("data-client-type")) } b.val(MvcControlsToolkit_Format(a, c, d, "", "")); b.trigger("pblur") } function MvcControlsToolkit_TypedEditDisplay_Get(a, b) { return MvcControlsToolkit_Parse($(a).val(), b) } function MvcControlsToolkit_TypedEditDisplay_GetById(b, a) { return MvcControlsToolkit_Parse($("#" + b).val(), a) } function MvcControlsToolkit_DisplayField_SetString(b, a) { return } function MvcControlsToolkit_DisplayField_GetString(a) { return $("#" + a.id).data("_True") } function MvcControlsToolkit_AjaxLink(c, b, d, a) { $.ajax({ type: "GET", url: c, success: function (e) { if (d == 0) { $("#" + b).html(e) } else { if (d == -1) { $("#" + b).before(e) } else { if (d == 1) { $("#" + b).after(e) } } } if (a) { a($("#" + b)) } } }) } function MvcControlsToolkit_AjaxSubmit(a, b) { if (!MvcControlsToolkit_FormIsValid(b, a)) { return } $("#" + b).parents("form").submit() } function MvcControlsToolkit_UpdateDropDownOptions(c, f, b, a, d, e) { $.getJSON(c, function (k) { var g = []; var h = function (n, m) { var l = null; if (typeof (a) == "function") { l = a(n) } else { l = a } g.push("<option value ='" + n + "' " + (l == null ? "" : "class = '" + l + "' ") + ">" + m + "</option>") }; var j = function (m, l, o) { var p = null; if (typeof (d) == "function") { p = d(o) } else { p = d } g.push("<optgroup label ='" + m + "' " + (p == null ? "" : "class = '" + p + "' ") + ">"); for (var n = 0; n < l.length; n++) { h(l[n].Value, l[n].Text) } g.push("</optgroup>") }; if (b != null) { h("", b) } $.each(k, function (l, m) { if ("Group" in m) { if ("Value" in m) { j(m.Text, m.Group, m.Value) } else { j(m.Text, m.Group, m.Text) } } else { h(m.Value, m.Text) } }); f.html(g.join("")); if (e != null && typeof (e) == "function") { e(f) } }) } $(document).ready(function () { $(document).on("mouseover", ".MvcControlsToolkit-Hover", function (a) { $(this).addClass("MvcControlsToolkit-Hover-On") }); $(document).on("mouseleave", ".MvcControlsToolkit-Hover", function (a) { if (a.target.tagName.toLowerCase() == "select") { return } $(this).removeClass("MvcControlsToolkit-Hover-On"); $(this).find("select").trigger("blur") }) }); var MvcControlsToolkit_ParseRegister = (function () { var a = []; var b = false; return { add: function (d, c) { a.push({ f: d, i: c }); if (c) { b = true } }, parse: function (c) { for (i = 0; i < a.length; i++) { a[i].f(c) } }, init: function () { if (b) { for (i = 0; i < a.length; i++) { if (a[i].i) { a[i].f() } } } } } })(); $(document).ready(function () { MvcControlsToolkit_ParseRegister.init() });
(function () { function q(t) { if (document.getElementById(t + "_Year") != null) { document.getElementById(t + "_Year").onkeypress = c; document.getElementById(t + "_Year").onpaste = p; document.getElementById(t + "_Year").ondrop = p; document.getElementById(t + "_Year").onchange = e } if (document.getElementById(t + "_Month") != null) { document.getElementById(t + "_Month").onchange = e } if (document.getElementById(t + "_Day") != null) { document.getElementById(t + "_Day").onchange = e } if (document.getElementById(t + "_Hours") != null) { document.getElementById(t + "_Hours").onchange = e } if (document.getElementById(t + "_Minutes") != null) { document.getElementById(t + "_Minutes").onchange = e } if (document.getElementById(t + "_Seconds") != null) { document.getElementById(t + "_Seconds").onchange = e } if ($("#" + t + "_Hidden").data("_DateInCalendar")) { var s = $("#" + t + "_Calendar").data("_CalendarOptions"); $("#" + t + "_Calendar").datepicker(s) } e(null, t, true, null, true); $("#" + t + "_Hidden").data("ready", true) } function g(t, s) { t = t + 1; if (s % 4 == 0) { return (t == 9 || t == 4 || t == 6 || t == 11) ? 30 : (t == 2) ? 29 : 31 } else { return (t == 9 || t == 4 || t == 6 || t == 11) ? 30 : (t == 2) ? 28 : 31 } } function r(v, u, s) { if (v == null || v.tagName != "SELECT") { return } var t = 0; if (u == v.options[0].value && s == v.options[v.options.length - 1].value) { return } var w = v.value; v.options.length = 0; for (i = u; i <= s; i++) { if (i < 10) { v.options[t] = new Option("   " + i, i) } else { if (i < 100) { v.options[t] = new Option("  " + i, i) } else { if (i < 1000) { v.options[t] = new Option(" " + i, i) } else { v.options[t] = new Option("" + i, i) } } } t++ } o(v.id, w) } function l(v, u, s) { if (v == null) { return } var t = 0; if (u == v.options[0].value && s == v.options[v.options.length - 1].value) { return } var w = v.value; v.options.length = 0; for (i = u; i <= s; i++) { v.options[t] = new Option(DateTimeMonthes[i], i + 1); t++ } o(v.id, w) } function k(v, u, s) { if (v == null) { return } var t = 0; if (u == v.options[0].value && s == v.options[v.options.length - 1].value) { return } var w = v.value; v.options.length = 0; for (i = u; i <= s; i++) { if (i < 10) { v.options[t] = new Option(" " + i, i) } else { v.options[t] = new Option("" + i, i) } t++ } o(v.id, w) } function m(v, u, s) { if (v == null) { return } var t = 0; if (u == v.options[0].value && s == v.options[v.options.length - 1].value) { return } var w = v.value; v.options.length = 0; for (i = u; i <= s; i++) { if (i < 10) { v.options[t] = new Option("0" + i, i) } else { v.options[t] = new Option("" + i, i) } t++ } o(v.id, w) } function p(s) { s = (s) ? (s) : ((window.event) ? (window.event) : null); if (s == null) { return true } var t = (s.target) ? (s.target) : ((event.srcElement) ? (event.srcElement) : null); if (t == null) { return true } var u; if (s.type == "paste") { u = window.clipboardData.getData("Text") } else { if (s.type == "drop") { u = s.dataTransfer.getData("Text") } else { return true } } for (i = 0; i < u.length; i++) { keyCode = u.charCodeAt(i); if (keyCode == 13 || keyCode == 8) { continue } if ((keyCode >= 48) && (keyCode <= 57)) { continue } else { return false } } t.value = u; return false } function c(s) { s = (s) ? (s) : ((window.event) ? (window.event) : null); if (s == null) { return true } var t = (s.target) ? (s.target) : ((event.srcElement) ? (event.srcElement) : null); if (t == null) { return true } var u = ((s.charCode || s.initEvent) ? s.charCode : ((s.which) ? s.which : s.keyCode)); if (u == 0 || u == 13 || u == 8) { return true } if ((u >= 48) && (u <= 57)) { return true } return false; var v = t.value } function d(s) { Nanno = document.getElementById(s + "_Year").value; Nmese = document.getElementById(s + "_Month").value; Ngiorno = document.getElementById(s + "_Day").value; var t = new Date(Nanno, Nmese - 1, Ngiorno); var u = $("#" + s + "_Calendar"); var v = u.datepicker("option", "dateFormat"); if (v == null) { v = "mm/dd/yy" } u.datepicker("setDate", $.datepicker.formatDate(v, t)) } function a(v, s) { var y = $("#" + s + "_Calendar"); if (v == null) { return } var z = y.datepicker("option", "dateFormat"); if (z == null) { z = "mm/dd/yy" } var t = null; try { t = $.datepicker.parseDate(z, v) } catch (x) { t = new Date() } var w = y.datepicker("option", "minDate"); var A = y.datepicker("option", "maxDate"); var B = null; var u = null; if (w != null) { B = $.datepicker.parseDate(z, w) } if (A != null) { u = $.datepicker.parseDate(z, A) } if (B != null && t < B) { t = B } if (u != null && t > u) { t = u } document.getElementById(s + "_Year").value = t.getFullYear(); document.getElementById(s + "_Month").value = t.getMonth() + 1; document.getElementById(s + "_Day").value = t.getDate(); e(null, s, true) } function f(s, u, w) { var t = $("#" + s + "_Calendar"); var v = t.datepicker("option", "dateFormat"); if (v == null) { v = "mm/dd/yy" } if (u != null) { t.datepicker("option", "minDate", $.datepicker.formatDate(v, u)) } else { t.datepicker("option", "minDate", null) } if (w != null) { t.datepicker("option", "maxDate", $.datepicker.formatDate(v, w)) } else { t.datepicker("option", "maxDate", null) } } function e(P, A, Q, v, ae) { var Z; if (A == null) { P = (P) ? (P) : ((window.event) ? (window.event) : null); if (P == null) { return false } var u = (P.target) ? (P.target) : ((event.srcElement) ? (event.srcElement) : null); if (u == null) { return false } Z = u.id.substring(0, u.id.lastIndexOf("_")) } else { Z = A } if ($("#" + Z + "_Hidden").data("Recursive") == true && v == null) { return } $("#" + Z + "_Hidden").data("Recursive", true); var V; var x; var ag; var z; var ac; var E; var ai = $("#" + Z + "_Hidden").data("_Curr"); var F = ai.getDate(); var R = ai.getMonth(); var y = ai.getFullYear(); var Y = ai.getHours(); var aa = ai.getMinutes(); var D = ai.getSeconds(); var af = $("#" + Z + "_Hidden").data("_MinDate") || null; var J = $("#" + Z + "_Hidden").data("_MaxDate") || null; var ak = $("#" + Z + "_Hidden").data("_ClientDynamicMin") || null; if (ak) { ak = ak() } var M = $("#" + Z + "_Hidden").data("_ClientDynamicMax") || null; if (M) { M = M() } if (ak != null && (af == null || ak > af)) { if (J != null && ak > J) { af = J } else { af = ak } } if (M != null && (J == null || M < J)) { if (af != null && M < af) { J = af } else { J = M } } if (document.getElementById(Z + "_Year") != null) { V = document.getElementById(Z + "_Year").value } else { V = y } if (document.getElementById(Z + "_Month") != null) { x = document.getElementById(Z + "_Month").value } else { x = R } if (document.getElementById(Z + "_Day") != null) { ag = document.getElementById(Z + "_Day").value } else { ag = F } if (document.getElementById(Z + "_Hours") != null) { z = document.getElementById(Z + "_Hours").value } else { z = Y } if (document.getElementById(Z + "_Minutes") != null) { ac = document.getElementById(Z + "_Minutes").value } else { ac = aa } if (document.getElementById(Z + "_Seconds") != null) { E = document.getElementById(Z + "_Seconds").value } else { E = D } var H = new Date(V, x - 1, ag, z, ac, E); if (J != null && J < H) { H = J } if (af != null && af > H) { H = af } V = H.getFullYear() + ""; x = (H.getMonth() + 1) + ""; ag = H.getDate() + ""; z = H.getHours() + ""; ac = H.getMinutes() + ""; E = H.getSeconds() + ""; var X; var O; var W; var U; var B; var ab; var K; var C; var s; var ad; var G; var S; var aj; var w; var t; var I; var N; var ah; $("#" + Z + "_Hidden").data("_Valid", true); X = parseInt(V); if (!isNaN(X)) { if (J == null) { K = null } else { K = J.getFullYear() } if (af == null) { C = null } else { C = af.getFullYear() } if (K != null && K < X) { X = K } if (C != null && C > X) { X = C } if (document.getElementById(Z + "_Year") != null && !$("#" + Z + "_Hidden").data("_DateHidden") && !$("#" + Z + "_Hidden").data("_DateInCalendar")) { r(document.getElementById(Z + "_Year"), C, K) } if ((K == null || K >= X) && (C == null || C <= X)) { s = 11; ad = 0; if (K == X) { s = J.getMonth() } if (C == X) { ad = af.getMonth() } O = parseInt(x); if (!isNaN(O)) { O = O - 1; if (ad > O) { O = ad } if (s < O) { O = s } if (ae || y == C || y == K || X == C || X == K) { if (document.getElementById(Z + "_Month") != null && !$("#" + Z + "_Hidden").data("_DateHidden") && !$("#" + Z + "_Hidden").data("_DateInCalendar")) { l(document.getElementById(Z + "_Month"), ad, s) } } G = 1; S = g(O, X); if (K == X && s == O) { S = J.getDate() } if (C == X && ad == O) { G = af.getDate() } W = parseInt(ag); if (!isNaN(W)) { if (G > W) { W = G } if (S < W) { W = S } if (document.getElementById(Z + "_Day") != null && !$("#" + Z + "_Hidden").data("_DateHidden") && !$("#" + Z + "_Hidden").data("_DateInCalendar")) { k(document.getElementById(Z + "_Day"), G, S) } aj = 0; w = 23; if (K == X && s == O && W == S) { w = J.getHours() } if (C == X && ad == O && W == G) { aj = af.getHours() } U = parseInt(z); if (!isNaN(U)) { if (w < U) { U = w } if (U < aj) { U = aj } if (document.getElementById(Z + "_Hours") != null) { m(document.getElementById(Z + "_Hours"), aj, w) } t = 0; I = 59; if (K == X && s == O && W == S && w == U) { I = J.getMinutes() } if (C == X && ad == O && W == G && aj == U) { t = af.getMinutes() } B = parseInt(ac); if (!isNaN(B)) { if (I < B) { B = I } if (t > B) { B = t } if (document.getElementById(Z + "_Minutes") != null) { m(document.getElementById(Z + "_Minutes"), t, I) } N = 0; ah = 59; if (K == X && s == O && W == S && w == U && I == B) { ah = J.getSeconds() } if (C == X && ad == O && W == G && aj == U && t == B) { N = af.getSeconds() } ab = parseInt(E); if (!isNaN(ab)) { if (ah < ab) { ab = ah } if (ab < N) { ab = N } if (document.getElementById(Z + "_Seconds") != null) { m(document.getElementById(Z + "_Seconds"), N, ah) } } else { $("#" + Z + "_Hidden").data("_Valid", false) } } else { $("#" + Z + "_Hidden").data("_Valid", false) } } else { $("#" + Z + "_Hidden").data("_Valid", false) } } else { $("#" + Z + "_Hidden").data("_Valid", false) } } else { $("#" + Z + "_Hidden").data("_Valid", false) } } } else { $("#" + Z + "_Hidden").data("_Valid", false) } if ($("#" + Z + "_Hidden").data("_DateInCalendar")) { f(Z, af, J) } var T = false; if ($("#" + Z + "_Hidden").data("_Valid")) { if (Q == true || (A == null && (y != X || R != O || F != W || Y != U || aa != B || D != ab))) { T = true } y = X; R = O; F = W; Y = U; aa = B; D = ab } if (!T) { $("#" + Z + "_Hidden").data("Recursive", false); return true } $("#" + Z + "_Hidden").data("_Curr", new Date(y, R, F, Y, aa, D)); if (document.getElementById(Z + "_Year") != null) { o(Z + "_Year", y) } if (document.getElementById(Z + "_Month") != null) { o(Z + "_Month", R + 1) } if (document.getElementById(Z + "_Day") != null) { o(Z + "_Day", F) } if ($("#" + Z + "_Hidden").data("_DateInCalendar")) { d(Z) } if (document.getElementById(Z + "_Hours") != null) { o(Z + "_Hours", Y) } if (document.getElementById(Z + "_Minutes") != null) { o(Z + "_Minutes", aa) } if (document.getElementById(Z + "_Seconds") != null) { o(Z + "_Seconds", D) } var L = $("#" + Z + "_Hidden").data("_Curr"); h(Z); $("#" + Z + "_Hidden").data("_ClientDateChanged")(L.getTime()); $("#" + Z + "_Hidden").trigger("DateTimeInput_Changed"); $("#" + Z + "_Hidden").data("Recursive", false); return true } function o(v, u) { var t = document.getElementById(v); if (t.tagName == "SELECT") { u = parseInt(u); for (var s = t.options.length - 1; s >= 0; s--) { if (parseInt(t.options[s].value) <= u) { t.selectedIndex = s; return } } t.selectedIndex = 0 } else { if ((u === null) || (u === undefined)) { u = "" } t.value = u } } function b(z, w, t) { if (!$("#" + z + "_Hidden").data("_Curr")) { return } var y = $("#" + z + "_Hidden").data("_Curr"); if (y == null) { return } var u = y.getTime(); if (t == 1 && w >= u) { return } if (t == 2 && w <= u) { return } var v = new Date(w); var s = $("#" + z + "_Hidden").data("_MinDate"); var x = $("#" + z + "_Hidden").data("_MaxDate"); if (s != null && v < s) { v = s } if (x != null && v > x) { v = x } if (document.getElementById(z + "_Hours") != null) { if (document.getElementById(z + "_Year") != null) { o(z + "_Year", v.getFullYear()); e(null, z, false, true) } if (document.getElementById(z + "_Month") != null) { o(z + "_Month", v.getMonth() + 1); e(null, z, false, true) } if (document.getElementById(z + "_Day") != null) { o(z + "_Day", v.getDate()); e(null, z, false, true) } if (document.getElementById(z + "_Hours") != null) { o(z + "_Hours", v.getHours()); e(null, z, false, true) } if (document.getElementById(z + "_Minutes") != null) { o(z + "_Minutes", v.getMinutes()); e(null, z, false, true) } if (document.getElementById(z + "_Seconds") != null) { o(z + "_Seconds", v.getSeconds()); e(null, z, true, true) } } else { if (document.getElementById(z + "_Year") != null) { o(z + "_Year", v.getFullYear()); e(null, z, false, true) } if (document.getElementById(z + "_Month") != null) { o(z + "_Month", v.getMonth() + 1); e(null, z, false, true) } if (document.getElementById(z + "_Day") != null) { o(z + "_Day", v.getDate()); e(null, z, true, true) } } if ($("#" + z + "_Hidden").data("_DateInCalendar")) { d(z) } } function j(s) { return $("#" + s + "_Hidden").data("_Curr") } window.MvcControlsToolkit_DateTimeInput_SetString = function (t, u) { clientID = t.id.substring(0, t.id.lastIndexOf("_")); var s = null; if (u == null || u == "") { s = new Date() } else { s = MvcControlsToolkit_Parse(u, MvcControlsToolkit_DataType_DateTime) } b(clientID, s.getTime(), 3) }; window.MvcControlsToolkit_DateTimeInput_Set = function (t, u, v, w) { clientID = t.id.substring(0, t.id.lastIndexOf("_")); if ($("#" + t.id).length == 0 || (!$("#" + clientID + "_Hidden").data("_Curr")) || (!($("#" + clientID + "_Hidden").data("ready") || false))) { var s = function () { MvcControlsToolkit_DateTimeInput_Set(t, u, v, w) }; setTimeout(s, 0); return } if (u == null || u == "") { u = new Date() } b(clientID, u.getTime(), 3) }; window.MvcControlsToolkit_DateTimeInput_SetById = function (v, s, t, u) { if (s == null || s == "") { s = new Date() } b(v + "__", s.getTime(), 3) }; window.MvcControlsToolkit_DateTimeInput_Get = function (s, t) { clientID = s.id.substring(0, s.id.lastIndexOf("_")); if (!$("#" + clientID + "_Hidden").data("_Curr")) { return null } if (!($("#" + clientID + "_Hidden").data("ready") || false)) { return null } return $("#" + clientID + "_Hidden").data("_Curr") }; window.MvcControlsToolkit_DateTimeInput_GetById = function (t, s) { return $("#" + t + "___Hidden").data("_Curr") }; window.MvcControlsToolkit_DateTimeInput_BindChange = function (t, s) { $("#" + t + "___Hidden").bind("DateTimeInput_Changed", s) }; window.MvcControlsToolkit_DateTimeInput_UnbindChange = function (t, s) { $("#" + t + "___Hidden").unbind("DateTimeInput_Changed", s) }; window.MvcControlsToolkit_DateTimeInput_GetString = function (s) { clientID = s.id.substring(0, s.id.lastIndexOf("_")); return MvcControlsToolkit_Format(j(clientID), "s", MvcControlsToolkit_DataType_DateTime, "", "") }; function n(u, t) { if (u == null || t == null) { return } var s = $("#" + u + "_Hidden").data("_UpdateList"); if (!s) { s = []; $("#" + u + "_Hidden").data("_UpdateList", s) } s.push(t) } function h(u) { var s = $("#" + u + "_Hidden").data("_UpdateList"); if (!s || s.length == 0) { return } for (var t = 0; t < s.length; t++) { e(null, s[t], true) } } mvcct = window.mvcct || {}; mvcct.basicControls = mvcct.basicControls || {}; mvcct.basicControls.dateInputInitialize = q; mvcct.basicControls.dateTimeInputUpdateFromCalendar = a; mvcct.basicControls.setDateInput = b; mvcct.basicControls.addToUpdateList = n })();
var DataButtonCancel = "DataButtonCancel"; var DataButtonDelete = "DataButtonDelete"; var DataButtonUndelete = "DataButtonUndelete"; var DataButtonEdit = "DataButtonEdit"; var DataButtonInsert = "DataButtonInsert"; var DataButtonResetRow = "DataButtonResetRow"; var DisplayPostfix = "_Display"; var EditPostfix = "_Edit"; var OldEditPostfix = "_OldEdit"; var UndeletePostfix = "_Undelete"; var ChangedExternallyPostfix = "_ChangedExternally"; var SavePostFix = "_Save"; var SavePostFixCurr = "_SaveCurr"; var DatagridFielsdPostfix = "_Datagrid_Fields"; var SavePostFixD = "_SaveD"; var SavePostFixU = "_SaveU"; var SavePostFixC = "_SaveC"; var DeletedPostFix = "_Deleted"; var ContainerPostFix = "_Container"; var VarPostfix = "_Var"; var AllNormalPostfix = "_AllNormal"; var ChandedPostfix = "_Changed"; var TemplateVarsPostfix = "_templateVars"; var TemplatePreparePostfix = "_templatePrepare"; var PlaceHolderPostfix = "_placeHolder"; var ChangedHiddenPostfix = "_changedHidden"; var TemplateSymbolPostfix = "_templateSymbol"; var LastIndexPostfix = "_lastIndex"; var DataGrid_ValidationTypePostfix = "_validationType"; var MinLastIndexPostfix = "_minLastIndex"; var LastVisibleIndexPostfix = "_lastVisibleIndex"; var TemplateEditHtmlPostfix = "_editHtml"; var TemplateDisplayHtmlPostfix = "_displayHtml"; var TemplateAllJavascriptPostfix = "_allJavascript"; var MvcControlsToolkit_DatagridCssPostfix = "_Css"; var MvcControlsToolkit_DatagridAltCssPostfix = "_AltCss"; var MvcControlsToolkit_DatagridFatherItemsPostfix = "_FatherItems"; function DataGrid_Field(original, current, validationType) { this.Original = original; this.Current = current; this.ValidationType = validationType; if (this.Original != null) { var attr = $(this.Original).attr("data-element-type"); if (attr != undefined && attr != null) { this.ControlType = attr; var cnode = this.Original; if (attr == "DateTimeInput") { this.Original = eval(" MvcControlsToolkit_" + attr + "_Get(cnode, null)") } else { this.Original = eval(" MvcControlsToolkit_" + attr + "_GetString(cnode)") } } } } DataGrid_Field.prototype = { Original: null, Current: null, ControlType: null, ValidationType: null, Reset: function () { if (this.Original == null) { return } if (this.Current == null) { return } if (this.ControlType != null) { var cnode = this.Current; var attr = this.ControlType; var cvalue = this.Original; if (attr == "DateTimeInput") { eval(" MvcControlsToolkit_" + attr + "_Set(cnode, cvalue, null, null);") } else { eval(" MvcControlsToolkit_" + attr + "_SetString(cnode, cvalue);") } return } if (this.Original.nodeName.toLowerCase() == "input") { var iType = this.Original.getAttribute("type").toLowerCase(); if (iType == "checkbox" || iType == "radio") { this.Current.checked = this.Original.checked } else { if (iType != "file" && iType != "button" && iType != "reset" && iType != "submit" && iType != "image") { try { this.Current.value = this.Original.value } catch (e) { } } } } else { if (this.Original.nodeName.toLowerCase() == "textarea") { this.Current.value = this.Original.value } else { if (this.Original.nodeName.toLowerCase() == "select") { $(this.Current).html($(this.Original).html()) } } } MvcControlsToolkit_RefreshWidget(this.Current) } }; function DataGrid_EditRowFields(a) { this.Names = new Array(); this.Dictionary = new Array(); this.ValidationType = a } DataGrid_EditRowFields.prototype = { Names: null, Dictionary: null, ValidationType: null, AddOriginal: function (b, a) { if (typeof this.Dictionary[b] === "undefined") { this.Names.push(b); this.Dictionary[b] = new DataGrid_Field(a, null, this.ValidationType) } else { this.Dictionary[b].Original = a } }, AddCurrent: function (b, a) { if (typeof this.Dictionary[b] === "undefined") { this.Names.push(b); this.Dictionary[b] = new DataGrid_Field(null, a, this.ValidationType) } else { this.Dictionary[b].Current = a } }, Reset: function () { var b = null; for (var a = 0; a < this.Names.length; a++) { b = this.Names[a]; if (typeof this.Dictionary[b] !== "undefined") { this.Dictionary[b].Reset() } } } }; function DataGrid_ResetRow(itemRoot) { var fields = null; var temp = null; var validationType = null; var root = itemRoot.substring(0, itemRoot.lastIndexOf("___")); root = root.substring(0, root.lastIndexOf("___")); validationType = eval(root + DataGrid_ValidationTypePostfix); fields = eval(itemRoot + DatagridFielsdPostfix); if (fields == null) { fields = new DataGrid_EditRowFields(validationType); eval(itemRoot + DatagridFielsdPostfix + " = fields;"); temp = eval(itemRoot + SavePostFix); temp.find("input:not([data-elementispart])").each(function (i) { fields.AddOriginal(this.id, this) }); temp.find("textarea:not([data-elementispart])").each(function (i) { fields.AddOriginal(this.id, this) }); temp.find("select:not([data-elementispart])").each(function (i) { fields.AddOriginal(this.id, this) }); temp.find("[data-element-type]").each(function (i) { fields.AddOriginal(this.id, this) }); temp = eval(itemRoot + SavePostFixCurr); temp.find("input:not([data-elementispart])").each(function (i) { fields.AddCurrent(this.id, this) }); temp.find("textarea:not([data-elementispart])").each(function (i) { fields.AddCurrent(this.id, this) }); temp.find("select:not([data-elementispart])").each(function (i) { fields.AddCurrent(this.id, this) }); temp.find("[data-element-type]").each(function (i) { fields.AddCurrent(this.id, this) }); eval(itemRoot + SavePostFix + " = null;") } fields.Reset(); var currRow = eval(itemRoot + SavePostFixCurr); currRow.find(".input-validation-error").removeClass("input-validation-error"); currRow.find(".field-validation-error").removeClass("field-validation-error").addClass("field-validation-valid") } function DataGrid_Remove_Edit_Item(itemRoot) { var temp = null; temp = $("#" + itemRoot + EditPostfix + ContainerPostFix).detach(); if (temp.length != 0) { eval(itemRoot + SavePostFixCurr + " = temp;") } } function DataGrid_Display_Edit_Item(itemRoot) { var temp = null; temp = eval(itemRoot + SavePostFixCurr); $("#" + itemRoot + DisplayPostfix + ContainerPostFix).before(temp); DataGrid_ResetRow(itemRoot) } function DataGrid_ItemRoot_AtIndex(c, a) { var b = c.substring(c.lastIndexOf("___")); var d = c.substring(0, c.lastIndexOf("___")); d = d.substring(0, d.lastIndexOf("_") + 1); return d + a + b } function DataGrid_ItemRoot_Index(a) { a = a.substring(0, a.lastIndexOf("___")); a = a.substring(a.lastIndexOf("_") + 1); return parseInt(a) } function DataGrid_ChecKInsertNewItem(itemRoot) { var root = itemRoot.substring(0, itemRoot.lastIndexOf("___")); root = root.substring(0, root.lastIndexOf("___")); if (eval("typeof " + root + LastIndexPostfix + " === 'undefined'")) { return } var index = DataGrid_ItemRoot_Index(itemRoot); var visibleIndex = eval(root + LastVisibleIndexPostfix); if (index != visibleIndex) { return } var lastIndex = eval(root + LastIndexPostfix); if (lastIndex == index) { index++; var indexStr = index + ""; var templateSymbol = eval(root + TemplateSymbolPostfix); var displayTemplate = eval(root + TemplateDisplayHtmlPostfix).replace(templateSymbol, indexStr); var editTemplate = eval(root + TemplateEditHtmlPostfix).replace(templateSymbol, indexStr); var changed = $("<div>").append($("#" + eval(root + ChangedHiddenPostfix)).clone()).remove().html().replace(templateSymbol, indexStr); var placeHolderName = eval(root + PlaceHolderPostfix); var placeHolder = $("<div>").append($("#" + placeHolderName).clone()).remove().html().replace(templateSymbol, indexStr); var tableRoot = $("#" + itemRoot + EditPostfix + ContainerPostFix).parent(); $(displayTemplate).appendTo(tableRoot); $(editTemplate).appendTo(tableRoot); jQuery.globalEval(eval(root + TemplateAllJavascriptPostfix).replace(templateSymbol, indexStr)); var hiddenElementsFather = $("#" + placeHolderName).parent(); hiddenElementsFather.append(placeHolder); hiddenElementsFather.append(changed); var newItemName = DataGrid_ItemRoot_AtIndex(itemRoot, index) + EditPostfix + ContainerPostFix; var newDisplayItemName = DataGrid_ItemRoot_AtIndex(itemRoot, index) + DisplayPostfix + ContainerPostFix; if (typeof $ !== "undefined" && $ !== null && typeof $.validator !== "undefined" && $.validator !== null && typeof $.validator.unobtrusive !== "undefined" && $.validator.unobtrusive !== null) { jQuery.validator.unobtrusive.parseExt("#" + newItemName) } var initVars = eval(root + TemplateVarsPostfix).replace(templateSymbol, indexStr); jQuery.globalEval(initVars); var changeData = new MvcControlsToolkit_changeData($("#" + newDisplayItemName), "NewHtmlCreated", 0); tableRoot.trigger("itemChange", changeData); var changeData = new MvcControlsToolkit_changeData($("#" + newItemName), "NewHtmlCreated", 0); tableRoot.trigger("itemChange", changeData); var initCall = eval(root + TemplatePreparePostfix).replace(templateSymbol, indexStr); jQuery.globalEval(initCall); visibleIndex++; lastIndex++; eval(root + LastVisibleIndexPostfix + " = visibleIndex;"); eval(root + LastIndexPostfix + " = lastIndex;") } else { index++; var nextItem = DataGrid_ItemRoot_AtIndex(itemRoot, index); var temp = eval(nextItem + SavePostFixD); $("#" + nextItem + DisplayPostfix + ContainerPostFix).replaceWith(temp); eval(root + LastVisibleIndexPostfix + " = index;") } } function DataGrid_ChecKDisappearItem(itemRoot) { var root = itemRoot.substring(0, itemRoot.lastIndexOf("___")); root = root.substring(0, root.lastIndexOf("___")); if (eval("typeof  " + root + LastIndexPostfix + " === 'undefined'")) { return } var index = DataGrid_ItemRoot_Index(itemRoot); var visibleIndex = eval(root + LastVisibleIndexPostfix); var minIndex = eval(root + MinLastIndexPostfix); if (index < minIndex) { return } if (index != visibleIndex) { $("#" + itemRoot + DisplayPostfix + ContainerPostFix).css("display", "none"); if (index == visibleIndex - 2) { index++; itemRoot = DataGrid_ItemRoot_AtIndex(itemRoot, index); DataGrid_ChecKDisappearItem(itemRoot); return } else { return } } var display = $("#" + itemRoot + DisplayPostfix + ContainerPostFix); if (display.length == 0) { return } if (index <= minIndex) { display.css("display", ""); return } var prevItem = DataGrid_ItemRoot_AtIndex(itemRoot, index - 1); if ($("#" + prevItem + DisplayPostfix + ContainerPostFix).length == 0) { return } display.css("display", "none"); visibleIndex--; eval(root + LastVisibleIndexPostfix + " = visibleIndex"); index--; var prevtItem = DataGrid_ItemRoot_AtIndex(itemRoot, index); DataGrid_ChecKDisappearItem(prevItem, root) } function MvcControlsToolkit_Grid_ItemName(c) { var b = c.id; var a = b.lastIndexOf("_"); if (a < 0) { return null } b = b.substring(0, a); a = b.lastIndexOf("_"); if (a < 0) { return null } return b.substring(0, a) + "_Container" } function MvcControlsToolkit_DataButton_Click(c, d) { if (typeof (c) != "string") { c = MvcControlsToolkit_Grid_ItemName(c) } var b = c.lastIndexOf("_"); if (b < 0) { return null } c = c.substring(0, b); b = c.lastIndexOf("_"); if (b < 0) { return null } var a = c.substring(0, b) + "_Changed"; DataButton_Click(c, a, d) } function DataButton_Click(itemRoot, itemChanged, dataButtonType) { if (dataButtonType == DataButtonDelete) { var undel = eval(itemRoot + SavePostFixU); var jItem = $("#" + itemRoot + DisplayPostfix + ContainerPostFix); if (jItem.length == 0) { return } var jParent = jItem.parent(); var changeData = new MvcControlsToolkit_changeData(jItem, "ItemDeleting", 0); jParent.trigger("itemChange", changeData); if (changeData.Cancel == true) { return } if (undel != null) { jItem.before(undel.clone(true)); jItem.detach() } else { jItem.css("display", "none") } DataGrid_Remove_Edit_Item(itemRoot); $("#" + itemChanged).val("True"); eval(itemRoot + DeletedPostFix + " = true;"); changeData = new MvcControlsToolkit_changeData(jItem, "ItemDeleted", 0); MvcControlsToolkit_DataGridApplyStylesItem(itemRoot); jParent.trigger("itemChange", changeData) } else { if (dataButtonType == DataButtonEdit) { var jItem = $("#" + itemRoot + DisplayPostfix + ContainerPostFix); if (jItem.length == 0) { return } var jParent = jItem.parent(); var changeData = new MvcControlsToolkit_changeData(jItem, "ItemGoingEdit", 0); jParent.trigger("itemChange", changeData); if (changeData.Cancel == true) { return } DataGrid_Display_Edit_Item(itemRoot); jItem.detach(); $("#" + itemChanged).val("True"); MvcControlsToolkit_DataGridApplyStylesItem(itemRoot); changeData = new MvcControlsToolkit_changeData($("#" + itemRoot + EditPostfix + ContainerPostFix), "ItemGoneEdit", 0); jParent.trigger("itemChange", changeData) } else { if (dataButtonType == DataButtonInsert) { var jItem = $("#" + itemRoot + DisplayPostfix + ContainerPostFix); if (jItem.length == 0) { return } var jParent = jItem.parent(); var changeData = new MvcControlsToolkit_changeData(null, "ItemCreating", 0); jParent.trigger("itemChange", changeData); if (changeData.Cancel == true) { return } DataGrid_Display_Edit_Item(itemRoot); jItem.detach(); $("#" + itemChanged).val("True"); DataGrid_ChecKInsertNewItem(itemRoot); MvcControlsToolkit_DataGridApplyStylesItem(itemRoot); changeData = new MvcControlsToolkit_changeData($("#" + itemRoot + EditPostfix + ContainerPostFix), "ItemCreated", 0); jParent.trigger("itemChange", changeData) } else { if (dataButtonType == DataButtonCancel) { var jItem = $("#" + itemRoot + EditPostfix + ContainerPostFix); if (jItem.length == 0) { return } var jParent = jItem.parent(); var changeData = new MvcControlsToolkit_changeData(jItem, "ItemUndoing", 0); jParent.trigger("itemChange", changeData); if (changeData.Cancel == true) { return } var temp = eval(itemRoot + SavePostFixD); jItem.before(temp); DataGrid_Remove_Edit_Item(itemRoot); $("#" + itemChanged).val("False"); DataGrid_ChecKDisappearItem(itemRoot); MvcControlsToolkit_DataGridApplyStylesItem(itemRoot); var newItem = $("#" + itemRoot + DisplayPostfix + ContainerPostFix); changeData = new MvcControlsToolkit_changeData(newItem, "ItemUndone", 0); jParent.trigger("itemChange", changeData) } else { if (dataButtonType == DataButtonResetRow) { var jItem = $("#" + itemRoot + EditPostfix + ContainerPostFix); if (jItem.length == 0) { return } var jParent = jItem.parent(); var changeData = new MvcControlsToolkit_changeData(jItem, "ItemResetting", 0); jParent.trigger("itemChange", changeData); if (changeData.Cancel == true) { return } var temp = eval(itemRoot + SavePostFixD); $("#" + itemRoot + EditPostfix + ContainerPostFix).before(temp); DataGrid_Remove_Edit_Item(itemRoot); DataGrid_Display_Edit_Item(itemRoot); $("#" + itemRoot + DisplayPostfix + ContainerPostFix).detach(); MvcControlsToolkit_DataGridApplyStylesItem(itemRoot); changeData = new MvcControlsToolkit_changeData(jItem, "ItemReset", 0); jParent.trigger("itemChange", changeData) } else { if (dataButtonType == DataButtonUndelete) { var undel = eval(itemRoot + SavePostFixU); var jItem = null; if (undel != null) { jItem = $("#" + itemRoot + UndeletePostfix + ContainerPostFix) } else { jItem = $("#" + itemRoot + DisplayPostfix + ContainerPostFix) } if (jItem.length == 0) { return } var jParent = jItem.parent(); var changeData = new MvcControlsToolkit_changeData(null, "ItemUndeleting", 0); jParent.trigger("itemChange", changeData); if (changeData.Cancel == true) { return } var temp = eval(itemRoot + SavePostFixD); if (undel != null) { jItem.before(temp); jItem.remove() } else { jItem.css("display", "") } eval(itemRoot + DeletedPostFix + " = false;"); $("#" + itemChanged).val("False"); MvcControlsToolkit_DataGridApplyStylesItem(itemRoot); changeData = new MvcControlsToolkit_changeData($("#" + itemRoot + DisplayPostfix + ContainerPostFix), "ItemUndeleted", 0); jParent.trigger("itemChange", changeData) } } } } } } } function DataGrid_Prepare_Template(itemRoot, itemChanged, deleted, root) { var allJavascript = CollectAllScriptsInelement(itemRoot + EditPostfix + ContainerPostFix) + CollectAllScriptsInelement(itemRoot + DisplayPostfix + ContainerPostFix); eval(root + TemplateAllJavascriptPostfix + " = allJavascript;"); var editTemplateElement = $("#" + itemRoot + EditPostfix + ContainerPostFix); var displayTemplateElement = $("#" + itemRoot + DisplayPostfix + ContainerPostFix); editTemplateElement.find("script").remove(); displayTemplateElement.find("script").remove(); var temp = null; if (editTemplateElement.hasClass("MVCCT_EncodedTemplate")) { temp = editTemplateElement.text() } else { temp = $("<div>").append(editTemplateElement.clone()).remove().html() } eval(root + TemplateEditHtmlPostfix + " = temp;"); if (displayTemplateElement.hasClass("MVCCT_EncodedTemplate")) { temp = displayTemplateElement.text() } else { temp = $("<div>").append(displayTemplateElement.clone()).remove().html() } eval(root + TemplateDisplayHtmlPostfix + " = temp;"); editTemplateElement.remove(); displayTemplateElement.remove() } function MvcControlsToolkit_DataGridApplyStylesItem(b) { var a = b.substring(0, b.lastIndexOf("___")); a = a.substring(0, a.lastIndexOf("___")); MvcControlsToolkit_DataGridApplyStyles(a) } function MvcControlsToolkit_DataGridApplyStyles(rootName) { var root = eval(rootName + MvcControlsToolkit_DatagridFatherItemsPostfix); if (root == null) { return } var css = eval(rootName + MvcControlsToolkit_DatagridCssPostfix); var altCss = eval(rootName + MvcControlsToolkit_DatagridAltCssPostfix); var alt = false; for (i = 0; i < root.childNodes.length; i++) { var nodeId = root.childNodes[i].id; if (nodeId == null) { continue } var end_prefix = nodeId.lastIndexOf("_"); if (end_prefix < 0) { continue } var ending = nodeId.substring(end_prefix); if (ending != ContainerPostFix) { continue } if ($(root.childNodes[i]).css("display") == "none") { continue } if (alt) { if (css != "") { $(root.childNodes[i]).removeClass(css) } if (altCss != "") { $(root.childNodes[i]).addClass(altCss) } } else { if (altCss != "") { $(root.childNodes[i]).removeClass(altCss) } if (css != "") { $(root.childNodes[i]).addClass(css) } } alt = !alt } } function DataGrid_Prepare_Item(itemRoot, itemChanged, deleted, root) { var temp = eval(root + AllNormalPostfix); if (temp == null) { temp = new Array() } temp.push(itemRoot); eval(root + AllNormalPostfix + " = temp"); $("#" + itemRoot + OldEditPostfix + ContainerPostFix).find("script").remove(); temp = $("#" + itemRoot + OldEditPostfix + ContainerPostFix).detach(); $("#" + itemRoot + EditPostfix + ContainerPostFix).find("script").remove(); if (temp.length == 0) { temp = $("#" + itemRoot + EditPostfix + ContainerPostFix).clone(true) } temp.css("display", ""); eval(itemRoot + SavePostFix + " = temp;"); temp = $("#" + itemRoot + DisplayPostfix + ContainerPostFix); temp.find("script").remove(); var parent = temp.parent(); if (parent.length > 0) { parent = parent[0]; eval(root + MvcControlsToolkit_DatagridFatherItemsPostfix + " = parent;") } eval(itemRoot + SavePostFixD + " = temp;"); temp.css("display", ""); temp = $("#" + itemRoot + ChangedExternallyPostfix + ContainerPostFix); temp.find("script").remove(); temp = temp.detach(); temp.css("display", ""); if (temp != null && temp.size() == 0) { temp = null } eval(itemRoot + SavePostFixC + " = temp;"); var deletedItem = $("#" + itemRoot + UndeletePostfix + ContainerPostFix); deletedItem.find("script").remove(); temp = deletedItem; if (temp != null && temp.size() == 0) { temp = null } eval(itemRoot + SavePostFixU + " = temp;"); if (deleted) { var editItem = $("#" + itemRoot + EditPostfix + ContainerPostFix); DataGrid_Remove_Edit_Item(itemRoot); editItem.css("display", ""); if (temp == null) { $("#" + itemRoot + DisplayPostfix + ContainerPostFix).css("display", "none") } else { $("#" + itemRoot + DisplayPostfix + ContainerPostFix).detach(); deletedItem.css("display", "") } eval(itemRoot + DeletedPostFix + " = true;") } else { deletedItem = deletedItem.detach(); deletedItem.css("display", ""); var editItem = $("#" + itemRoot + EditPostfix + ContainerPostFix); if (eval(itemChanged + VarPostfix)) { DataGrid_Remove_Edit_Item(itemRoot); $("#" + itemRoot + DisplayPostfix + ContainerPostFix).css("display", "") } else { $("#" + itemRoot + DisplayPostfix + ContainerPostFix).detach() } editItem.css("display", ""); eval(itemRoot + DeletedPostFix + " = false;") } } function OnBeginDetailForm(baseName, detailType, rowId, loadingElementId, validationType) { detailBusy = eval(baseName + "_DetailBusy"); if (detailBusy) { return false } eval(baseName + "_DetailBusy = true;"); eval(baseName + "_TypeDetail = '" + detailType + "';"); if (rowId != null) { if (detailType == "Insert") { eval(baseName + "_CurrentRow = null;") } else { eval(baseName + "_CurrentRow = '" + rowId + "';") } } else { var res = MvcControlsToolkit_FormIsValid(loadingElementId, validationType); return res } return true } function OnFailureDetailForm(baseName, displayExecute, editExecute) { var detailType = eval(baseName + "_TypeDetail"); if (detailType == "Display") { if (displayExecute != null) { (displayExecute + "();") } } else { if (editExecute != null) { (editExecute + "();") } } eval(baseName + "_DetailBusy = false;") } function TrueValue(value, fieldName) { var trueValue = value; try { trueValue = eval(fieldName + "_True") } catch (e) { } var field = $("#" + fieldName); if (field.length == 0) { field = $("#" + fieldName + "___Hidden") } trueValue = field.data("_True") || trueValue; return trueValue } function FormattedValue(value, fieldName) { var fValue = value; try { fValue = eval(fieldName + "_Format") } catch (e) { } fValue = $("#" + fieldName + "___Hidden").data("_Format") || fValue; if (fValue && fValue.length > 0 && fValue.substring(0, 1) == "<") { fValue = $("#" + fieldName + "_Format").text(); $("#" + fieldName + "_Format").remove() } var companionField = document.getElementById(fieldName + "_hidden"); if (companionField != null) { fValue = companionField.value } return fValue } function UrlValue(fieldName) { var urlValue = null; try { urlValue = eval(fieldName + "_Url") } catch (e) { } return urlValue } function OnSuccessDetailForm(baseName, displayExecute, editExecute, ajaxContext, formId, validationType, unobtrusiveAjaxOn, updateTargetId) { var detailType = eval(baseName + "_TypeDetail"); if (!unobtrusiveAjaxOn) { GlobalEvalScriptAndDestroy(ajaxContext.get_updateTarget()) } else { if (detailType == "Edit") { $("#" + updateTargetId).html(ajaxContext) } } if (validationType != ValidationType_Server) { Setup_Ajax_ClientValidation(formId, validationType) } var detailType = eval(baseName + "_TypeDetail"); var changedFieldCss = eval(baseName + "_ChangedFieldCss"); var deletedRecordCss = eval(baseName + "_DeletedRecordCss"); var isValid = false; var hiddenIsValid = document.getElementById("IsValid"); if (hiddenIsValid != null && hiddenIsValid.value == "True") { isValid = true } var itemRoot = eval(baseName + "_CurrentRow"); if (isValid && (detailType == "FirstEdit" || detailType == "Edit" || detailType == "Display")) { var fieldsToUpdate = eval(baseName + "_FieldsToUpdate").split(","); var detailRoot = eval(baseName + "_DetailPrefix"); if (itemRoot != null) { var oldItemRoot = itemRoot.substring(0, itemRoot.lastIndexOf("Value")) + "OldValue"; var isInsert = true; var isExternalDelete = true; var changedDisplay = eval(itemRoot + SavePostFixC); var changedDisplayAvailable = false; if (changedDisplay == null) { changedDisplay = eval(itemRoot + SavePostFixD) } else { changedDisplayAvailable = true } for (var i = 0; i < fieldsToUpdate.length; i++) { var oField = document.getElementById(oldItemRoot + "_" + fieldsToUpdate[i]); var oFields = document.getElementById(oldItemRoot + "_" + fieldsToUpdate[i] + "___JSonModel"); if (oField == null) { oField = oFields } if (oField != null) { isInsert = false } var newFieldName = null; if (detailRoot.length == 0) { newFieldName = fieldsToUpdate[i] } else { newFieldName = oldItemRoot + "_" + fieldsToUpdate[i] } var newField = document.getElementById(newFieldName); if (newField != null) { isExternalDelete = false } if (oField != null) { var newValue = null; var newFormattedValue = null; if (newField != null && newField.getAttribute("type") != null && (newField.getAttribute("type").toLowerCase() == "checkbox" || newField.getAttribute("type").toLowerCase() == "radio")) { if (newField.getAttribute("checked") != null && newField.checked == true) { newValue = "True" } else { newValue = "False" } newFormattedValue = FormattedValue(newValue, newFieldName) } else { if (newField != null && newField.getAttribute("type") != null && newField.getAttribute("type").toLowerCase() == "file") { } else { if (newField != null) { try { if (newField.nodeName != null && (newField.nodeName.toLowerCase() == "input" || newField.nodeName.toLowerCase() == "textarea")) { newValue = TrueValue(newField.value, newFieldName); newFormattedValue = FormattedValue(newField.value, newFieldName) } else { if (newField.nodeName != null && newField.nodeName.toLowerCase() == "select") { var jNewField = $(newField); newValue = TrueValue(jNewField.val(), newFieldName); if (newValue == "") { newValue = null } newFormattedValue = FormattedValue(jNewField.find("option:selected").text(), newFieldName) } else { newValue = TrueValue(newField.childNodes[0].nodeValue, newFieldName); newFormattedValue = FormattedValue(newField.childNodes[0].nodeValue, newFieldName) } } } catch (e) { } } else { newValue = TrueValue(null, newFieldName); newFormattedValue = FormattedValue(null, newFieldName) } } } var itemToUpdate = changedDisplay.find("#" + itemRoot + "_Display_" + fieldsToUpdate[i]); var originalValue; var jOField = $(oField); if (typeof (jOField.data("originalvalue")) !== "undefined") { originalValue = jOField.data("originalvalue"); if (originalValue == null || originalValue == undefined) { originalValue = oField.value; jOField.data("originalvalue", oField.value) } } else { originalValue = oField.value; jOField.data("originalvalue", oField.value) } if (changedFieldCss != null) { if (newValue != null && originalValue != newValue) { itemToUpdate.removeClass(changedFieldCss); itemToUpdate.addClass(changedFieldCss) } else { itemToUpdate.removeClass(changedFieldCss) } } if (newValue != null && oField.value != newValue) { oField.value = newValue; if (itemToUpdate.length != 0) { var inputType = itemToUpdate.attr("type"); if (inputType != null && inputType != undefined && (inputType.toLowerCase() == "checkbox" || inputType.toLowerCase() == "radio")) { if (newValue.toLowerCase() == "true") { itemToUpdate.checked = true } else { itemToUpdate.checked = false } } else { if (itemToUpdate.filter("img").length > 0) { var imgUrl = UrlValue(newFieldName); if (imgUrl != null) { try { itemToUpdate.attr("src", imgUrl); itemToUpdate.attr("alt", newFormattedValue) } catch (e) { } } } else { try { itemToUpdate.html(newFormattedValue) } catch (e) { } } } } } } } if (isExternalDelete) { $('input[id^="' + oldItemRoot + '"]').remove(); if (deletedRecordCss != null) { var newSavePostFixD = eval(itemRoot + SavePostFixD); newSavePostFixD.addClass(deletedRecordCss); $("#" + itemRoot + DisplayPostfix + ContainerPostFix).replaceWith(newSavePostFixD.clone(true)) } } else { if (!isInsert) { if (changedDisplayAvailable) { eval(itemRoot + SavePostFixD + " = " + itemRoot + SavePostFixC + ";") } var newSavePostFixD = eval(itemRoot + SavePostFixD); $("#" + itemRoot + DisplayPostfix + ContainerPostFix).replaceWith(newSavePostFixD.clone(true)) } } if (itemRoot != null) { MvcControlsToolkit_DataGridApplyStylesItem(itemRoot) } } } if (detailType == "Display") { if (displayExecute != null) { try { eval(displayExecute + "(itemRoot, isValid, detailType);") } catch (e) { } } } else { if (editExecute != null) { try { eval(editExecute + "(itemRoot, isValid, detailType);") } catch (e) { } } } eval(baseName + "_DetailBusy = false;") };
var SortableList_PermutationUpdateRootPrefix = "_PermutationUpdateRoot"; var SortableList_CanSortPrefix = "_CanSort"; var SortableList_ElementsNumberPrefix = "_ElementsNumber"; var SortableList_TemplateSymbolPrefix = "_TemplateSymbol"; var SortableList_TemplateSriptPrefix = "_TemplateSript"; var SortableList_TemplateHtmlPrefix = "_TemplateHtml"; var SortableList_PermutationPrefix = "_Permutation"; var SortableList_PermutationNamePrefix = ".Permutation"; var SortableList_UpdateModelPrefix = "___"; var SortableList_UpdateModelNamePrefix = ".$$"; var SortableList_UpdateModelFieldsPrefix = "_f_ields"; var SortableList_UpdateModelFieldsNamePrefix = ".f$ields"; var SortableList_ItemsContainerPrefix = "_ItemsContainer"; var SortableList_OriginalElementsNumber = "_OriginalElementsNumber"; var SortableList_TemplateHiddenPrefix = "_TemplateHidden"; var SortableList_TemplateHiddenHtmlPrefix = "_TemplateHiddenHtml"; var SortableList_NamePrefixPrefix = "_NamePrefix"; var SortableList_CssPostFix = "_Css"; var SortableList_AltCssPostFix = "_AltCss"; function MvcControlsToolkit_SortableList_ItemName(a) { return a.id } function MvcControlsToolkit_SortableList_PrepareTemplate(a, b) { MvcControlsToolkit_SortableList_PrepareTemplates(a, [b]) } function MvcControlsToolkit_SortableList_PrepareTemplates(root, templatesId) { eval(root + SortableList_TemplateSriptPrefix + " = new Array();"); eval(root + SortableList_TemplateHtmlPrefix + " = new Array();"); eval(root + SortableList_TemplateHiddenHtmlPrefix + " = new Array();"); for (var i = 0; i < templatesId.length; i++) { var templateId = templatesId[i]; var templateElement = $("#" + templateId); var allJavascript = CollectAllScriptsInelement(templateId); eval(root + SortableList_TemplateSriptPrefix + "[i] = allJavascript;"); $("#" + templateId).find("script").remove(); var temp = null; if (templateElement.hasClass("MVCCT_EncodedTemplate")) { temp = templateElement.text() } else { temp = $("<div>").append(templateElement.clone()).remove().html() } eval(root + SortableList_TemplateHtmlPrefix + "[i] = temp;"); var hidden = eval(root + SortableList_TemplateHiddenPrefix); if (hidden.constructor == Array) { hidden = eval(root + SortableList_TemplateHiddenPrefix + "[i]") } temp = $("<div>").append($("#" + hidden).clone()).remove().html(); eval(root + SortableList_TemplateHiddenHtmlPrefix + "[i] = temp;"); $("#" + templateId).remove() } var canSort = eval(root + SortableList_CanSortPrefix); if (canSort) { var elementNumber = eval(root + SortableList_ElementsNumberPrefix); var updateModel = document.getElementById(root + SortableList_UpdateModelPrefix + elementNumber); updateModel.setAttribute("id", updateModel.id + "_"); var updateModelFields = document.getElementById(root + SortableList_UpdateModelPrefix + elementNumber + SortableList_UpdateModelFieldsPrefix); updateModelFields.setAttribute("id", updateModelFields.id + "_") } } function MvcControlsToolkit_SortableList_AddNew(a, e, f, d, b) { if (typeof (a) != "string") { a = a.id; var c = a.lastIndexOf("_"); a = a.substring(0, c) } MvcControlsToolkit_SortableList_AddNewChoice(a, 0, e, f, d) } function MvcControlsToolkit_SortableList_AddNewChoice(root, choice, item, after, replace, prepend) { if (eval("typeof  " + root + SortableList_ElementsNumberPrefix + " === 'undefined'")) { return } var rootElement = $("#" + root + SortableList_ItemsContainerPrefix); var changeData = new MvcControlsToolkit_changeData(null, "ItemCreating", choice); rootElement.trigger("itemChange", changeData); if (changeData.Cancel == true) { return } var elementNumber = eval(root + SortableList_ElementsNumberPrefix); var originalElementNumber = eval(root + SortableList_OriginalElementsNumber); var templateSymbol = eval(root + SortableList_TemplateSymbolPrefix); if (templateSymbol.constructor == Array) { templateSymbol = eval(root + SortableList_TemplateSymbolPrefix + "[choice]") } var hidden = eval(root + SortableList_TemplateHiddenPrefix); if (hidden.constructor == Array) { hidden = eval(root + SortableList_TemplateHiddenPrefix + "[choice]") } var allJavascript = eval(root + SortableList_TemplateSriptPrefix + "[choice]").replace(templateSymbol, elementNumber + ""); var allHtml = eval(root + SortableList_TemplateHtmlPrefix + "[choice]").replace(templateSymbol, elementNumber + ""); var hiddenElementFather = $("#" + hidden).parent(); var hiddenElement = eval(root + SortableList_TemplateHiddenHtmlPrefix + "[choice]").replace(templateSymbol, elementNumber + ""); var canSort = eval(root + SortableList_CanSortPrefix); var namePrefix = eval(root + SortableList_NamePrefixPrefix); elementNumber++; eval(root + SortableList_ElementsNumberPrefix + " = elementNumber;"); if (canSort) { var permutation = document.getElementById(root + SortableList_PermutationPrefix); permutation.setAttribute("name", namePrefix + SortableList_UpdateModelNamePrefix + elementNumber + ".$" + SortableList_PermutationNamePrefix); var updateModel = document.getElementById(root + SortableList_UpdateModelPrefix + originalElementNumber + "_"); updateModel.setAttribute("name", namePrefix + SortableList_UpdateModelNamePrefix + elementNumber); var updateModelFields = document.getElementById(root + SortableList_UpdateModelPrefix + originalElementNumber + SortableList_UpdateModelFieldsPrefix + "_"); updateModelFields.setAttribute("name", namePrefix + SortableList_UpdateModelNamePrefix + elementNumber + SortableList_UpdateModelFieldsNamePrefix) } hiddenElementFather.append(hiddenElement); var result; if (item == null) { if (prepend) { result = $(allHtml).prependTo(rootElement) } else { var hasFooter = false; var lastChild = $("#" + root + "_Footer"); if (lastChild.length > 0) { hasFooter = true } if (hasFooter) { result = $(allHtml).insertBefore(lastChild) } else { result = $(allHtml).appendTo(rootElement) } } } else { if (after != true) { result = $(allHtml).insertBefore(item) } else { result = $(allHtml).insertAfter(item) } if (replace) { MvcControlsToolkit_Bind(item, result[0]); $(item).remove() } } if (typeof $ !== "undefined" && $ !== null && typeof $.validator !== "undefined" && $.validator !== null && typeof $.validator.unobtrusive !== "undefined" && $.validator.unobtrusive !== null) { jQuery.validator.unobtrusive.parseExt("#" + result[0].id) } jQuery.globalEval(allJavascript); result.data("ScriptsRemoved", true); Update_Permutations_Root(root); if (canSort) { $("#" + root + SortableList_ItemsContainerPrefix).sortable("refresh") } changeData = new MvcControlsToolkit_changeData(result, "ItemCreated", choice); rootElement.trigger("itemChange", changeData); changeData = new MvcControlsToolkit_changeData(result, "NewHtmlCreated", 0); rootElement.trigger("itemChange", changeData); return result } function MvcControlsToolkit_SortableList_ComputeRoot(b) { var a = b.lastIndexOf("___"); if (a < 0) { return null } var c = b.substring(0, a); a = c.lastIndexOf("___"); c = c.substring(0, a); if (a < 0) { return null } return c } function MvcControlsToolkit_SortableListUpdate(c, d) { if (d != c.parent().attr("id")) { return } var f = c.attr("id"); if (f == null) { return } var e = MvcControlsToolkit_SortableList_ComputeRoot(f); Update_Permutations_Root(e); var a = $("#" + e + "_ItemsContainer"); var b = new MvcControlsToolkit_changeData(c, "ItemMoved", 0); a.trigger("itemChange", b) } function Update_Permutations(a) { return Update_Permutations_Root(MvcControlsToolkit_SortableList_ComputeRoot(a)) } function Update_Permutations_Root(rootName) { if (rootName == null) { return } var root = document.getElementById(rootName + "_ItemsContainer"); if (root == null) { return } if (root.childNodes.length > 0 && root.childNodes[root.childNodes.length - 1].nodeType == 1 && root.childNodes[root.childNodes.length - 1].outerHTML != "" && root.childNodes[root.childNodes.length - 1].id == "") { root = root.childNodes[root.childNodes.length - 1] } var field = document.getElementById(rootName + "_Permutation"); var alt = false; var css = eval(rootName + SortableList_CssPostFix); var altCss = eval(rootName + SortableList_AltCssPostFix); for (i = 0; i < root.childNodes.length; i++) { var currNode = root.childNodes[i]; var jCurrNode = $(currNode); if (jCurrNode.data("ScriptsRemoved") !== true) { CollectScriptAndDestroy(currNode); jCurrNode.data("ScriptsRemoved", true) } var nodeId = root.childNodes[i].getAttribute("id"); if (nodeId == null) { continue } var end_prefix = nodeId.lastIndexOf("_"); if (end_prefix < 0) { continue } var ending = nodeId.substring(end_prefix + 1); if (ending == "Header" || ending == "Footer") { continue } if (alt) { if (css != "") { $(root.childNodes[i]).removeClass(css) } if (altCss != "") { $(root.childNodes[i]).addClass(altCss) } } else { if (altCss != "") { $(root.childNodes[i]).removeClass(altCss) } if (css != "") { $(root.childNodes[i]).addClass(css) } } alt = !alt } if (field == null) { return } var res = ""; for (i = 0; i < root.childNodes.length; i++) { var nodeId = root.childNodes[i].getAttribute("id"); var end_prefix = nodeId.lastIndexOf("_"); if (end_prefix < 0) { continue } var deleteName = nodeId.substring(0, end_prefix + 1) + "Deleted"; var deletedHidden = document.getElementById(deleteName); if (deletedHidden != null && deletedHidden.value == "True") { continue } var end = nodeId.lastIndexOf("___"); var order = nodeId.substring(0, end); var start = order.lastIndexOf("_") + 1; order = order.substring(start); if (i > 0) { res = res + "," } res = res + order } field.value = res } function MvcControlsToolkit_SortableList_Click(target, dataButtonType, noEvents) { if (typeof (target) != "string") { target = target.id } if (dataButtonType == ManipulationButtonCustom) { eval(target); return } var end_prefix = target.lastIndexOf("_"); var deleteName = target.substring(0, end_prefix); end_prefix = deleteName.lastIndexOf("_"); deleteName = deleteName.substring(0, end_prefix + 1) + "Deleted"; var deletedHidden = document.getElementById(deleteName); var rootName = MvcControlsToolkit_SortableList_ComputeRoot(target); var rootElement = $("#" + rootName + SortableList_ItemsContainerPrefix); if (dataButtonType == ManipulationButtonRemove) { var item = $("#" + target); var changeData = new MvcControlsToolkit_changeData(item, "ItemDeleting", 0); if (noEvents == null) { rootElement.trigger("itemChange", changeData) } if (changeData.Cancel == true) { return } item.remove(); Update_Permutations_Root(rootName); changeData = new MvcControlsToolkit_changeData(item, "ItemDeleted", 0); if (noEvents == null) { rootElement.trigger("itemChange", changeData) } } else { if (dataButtonType == ManipulationButtonHide) { var item = $("#" + target); var changeData = new MvcControlsToolkit_changeData(item, "ItemDeleting", 0); if (noEvents == null) { rootElement.trigger("itemChange", changeData) } if (changeData.Cancel == true) { return } var placeHolder = "<span style='display:none' id = '" + target + "_ph' />"; $(placeHolder).insertBefore("#" + target); jQuery.globalEval("var " + deleteName + " = $('#' + '" + target + "').detach();"); if (deletedHidden != null) { deletedHidden.value = "True" } Update_Permutations_Root(rootName); changeData = new MvcControlsToolkit_changeData(item, "ItemDeleted", 0); if (noEvents == null) { rootElement.trigger("itemChange", changeData) } } else { if (dataButtonType == ManipulationButtonShow) { var changeData = new MvcControlsToolkit_changeData(null, "ItemCreating", 0); if (noEvents == null) { rootElement.trigger("itemChange", changeData) } if (changeData.Cancel == true) { return } var toAdd = eval(deleteName); toAdd.find("script").remove(); $(toAdd).insertBefore("#" + target + "_ph"); $("#" + target + "_ph").remove(); if (deletedHidden != null) { deletedHidden.value = "False" } Update_Permutations_Root(rootName); changeData = new MvcControlsToolkit_changeData(toAdd, "ItemCreated", 0); if (noEvents == null) { rootElement.trigger("itemChange", changeData) } } } } } function MvcControlsToolkit_SortableList_Move(c, d, e) { if (e != true) { $(c).insertBefore(d) } else { $(c).insertAfter(d) } var f = MvcControlsToolkit_SortableList_ComputeRoot(c.id); Update_Permutations_Root(f); var a = $("#" + f + "_ItemsContainer"); var b = new MvcControlsToolkit_changeData(c, "ItemMoved", 0); a.trigger("itemChange", b) };