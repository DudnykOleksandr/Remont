/* ****************************************************************************
*  MvcControlToolkit.JsQueryable-2.4.5.js
* Copyright (c) Francesco Abbruzzese. All rights reserved.
* francesco@dotnet-programming.com
* http://www.dotnet-programming.com/
* 
* This software is subject to the the license at http://mvccontrolstoolkit.codeplex.com/license  
* and included in the license.txt file of this distribution.
* 
* You must not remove this notice, or any other, from this software.
*
* ***************************************************************************/
(function () { mvcct.$$ = { and: "and", or: "or", not: "not", eq: "eq", ne: "ne", gt: "gt", ge: "ge", lt: "lt", le: "le", endswith: "endswith", startswith: "startswith", substringof: "substringof", substringofInv: "substringofInv", notSupported: "ns", encodeCondition: function (a) { if (a == "Equal" || a == "1") { return mvcct.$$.eq } else { if (a == "NotEqual" || a == "2") { return mvcct.$$.ne } else { if (a == "LessThan" || a == "4") { return mvcct.$$.lt } else { if (a == "LessThanOrEqual" || a == "8") { return mvcct.$$.le } else { if (a == "GreaterThan" || a == "16") { return mvcct.$$.gt } else { if (a == "GreaterThanOrEqual" || a == "32") { return mvcct.$$.ge } else { if (a == "StartsWith" || a == "64") { return mvcct.$$.startswith } else { if (a == "EndsWith" || a == "128") { return mvcct.$$.endswith } else { if (a == "Contains" || a == "256") { return mvcct.$$.substringofInv } else { if (a == "IsContainedIn" || a == "512") { return mvcct.$$.substringof } else { return mvcct.$$.notSupported } } } } } } } } } } } }; mvcct.Queryable = function (d, c) { var a = d || this.$$.and; var b = null; return { filterOperator: function () { return a }, get: function () { return null }, isLocal: function () { return false }, execute: function (e) { }, getState: function () { return null }, setState: function (e) { }, resetFilter: function () { return this }, resetSorting: function () { this.resetSortingInfos(); return this }, resetPaging: function () { return this }, setSorting: function (e) { return this }, setFilter: function (e) { return this }, setPaging: function (f, e) { return this }, importSorting: function (f) { if (f == null || f == "") { return this } this.resetSorting(); this.resetSortingInfos(); var h = f.split(";"); for (var e = 0; e < h.length; e++) { var g = h[e].split("#"); if (g.length < 2) { continue } this.addSort(MvcControlsToolkit_Trim(g[0]), g[1].indexOf("-") >= 0) } return this }, importSortingControl: function (e) { if (!e) { return this } return this.importSorting($("#" + e + "___SortInfoAsString").val()) }, resetSortingInfos: function () { b = null }, getSortingInfos: function () { return b }, importSortingInfos: function (f, e) { if (!f) { return } if (e && f.container && mvcct.html && mvcct.html.sorting.initializeButtons) { $("#" + f.container).val(f.value); mvcct.html.sorting.initializeButtons(f.func) } this.importSorting(f.value); b = f; return this }, importPager: function (g, f) { if (!g) { return this } var e = $("#" + g); this.setPaging(parseInt(e.val()), f); return this }, addSort: function (f, g, e) { return this }, addCondition: function (g, f, e, h, i) { return this }, addConditionAsString: function (e, h, g, i, f) { if (f === false) { return this } g = MvcControlsToolkit_Parse(g, i); if (i == 0 || (i == 4 && g) || (i > 0 && i < 4 && !isNaN(g))) { this.addCondition(e, h, g, f, i) } }, open: function (e, f, g) { return res }, close: function (e) { if ((this["father"] || null) == null) { return this } return this.father }, selectErrors: function () { }, importClauses: function (n, p) { if (!n) { return this } var m = 0; var g = false; var t = p || this; if (this.filterOperator() != mvcct.$$.and) { t = this.open(mvcct.$$.and, true) } while (!g) { var l = $("#" + n + "___" + m); var e = n + "___" + m + "___"; if (l.length != 0) { var f = $("#" + e + "Selected"); if (f.length > 0 && (f.val() == "True" || (f.prop("checked") || false))) { var s = mvcct.$$.encodeCondition($("#" + e + "Condition").val()); if (s != mvcct.$$.notSupported) { var o = $("#" + n + "___" + m + "_f_ields").val().split(",")[0]; var k = $("#" + e + "Search"); var r = null; var q = null; var i = $("#" + e + "Search[data-element-type], #" + e + "Search_hidden[data-element-type], #" + e + "Search___Hidden[data-element-type]"); if (i.length > 0) { q = parseInt(i.attr("data-client-type") || "0"); var h = i[0]; r = window["MvcControlsToolkit_" + i.attr("data-element-type") + "_Get"](h, q); if (q == 0 || (q == 4 && r) || (q > 0 && q < 4 && !isNaN(r))) { t.addCondition(s, o, r, true, q, i.attr("data-date-only") == "true") } } else { r = k.attr("type") == "checkbox" ? (k.prop("checked") ? "true" : "false") : k.val(); q = parseInt(k.attr("data-client-type") || "0"); t.addConditionAsString(s, o, r, q, true) } } } } else { g = true } m++ } if (this.filterOperator() != mvcct.$$.and) { t.close(true) } return this } } }; mvcct.oDataQueryable = function (h, g, k, c) { var a = ""; var e = ""; var b = ""; var i = 1; var f = null; var d = this.Queryable(g, c); k = $.extend({}, mvcct.oDataQueryable.DefaulOptions, k); return $.extend({}, d, { changeLink: function (l) { h = l }, get: function () { var m = ""; if (k.includeTotalcount) { if (m != "") { m = m + "&" } m = m + "$inlinecount=allpages" } if (a != "") { if (m != "") { m = m + "&" } if (c === true) { m = m + mvcct.$$.not + " (" + a + ")" } m = m + a } if (e != "") { if (m != "") { m = m + "&" } m = m + e } if (b != "") { if (m != "") { m = m + "&" } m = m + b } if (f) { if (m != "") { m = m + "&" } m = m + f } var l = k.connector == "?" && h.indexOf("?") >= 0 ? "&" : k.connector; if (m != "") { m = h + l + m } else { m = h } return m }, execute: function (m, l) { $.ajax({ url: this.get(), contentType: "application/json", dataType: "text", success: function (o, p, n) { o = $.parseJSON(o); m(o, p, n) }, error: l }) }, setState: function (l) { a = l.f; e = l.s; b = l.p; i = l.page; f = l.params; this.importSortingInfos(l.sortInfos, true) }, getState: function () { var l = { f: a, s: e, p: b, page: i, params: f, sortInfos: this.getSortingInfos() }; return l }, setExtraParams: function (l) { f = l }, resetFilter: function () { a = ""; return this }, resetSorting: function () { e = ""; this.resetSortingInfos(); return this }, resetPaging: function () { b = ""; i = 1; return this }, setSorting: function (l) { e = l; return this }, setFilter: function (l) { a = l; return this }, setPaging: function (n, l) { if (l == null || l == "") { l = 1 } var m = (n - 1) * l; b = k.skip + m + "&" + k.top + l; i = n; return this }, addSort: function (m, n, l) { if (l === false) { return this } m = m.replace(".", "/"); if (e != "") { e = e + "," } else { e = k.orderby } e = e + m + " " + (n ? k.desc : k.asc); return this }, addStringCondition: function (m, l) { if (l === false || m == "") { return this } if (a != "") { a = a + " " + this.filterOperator() + " " } else { a = k.filter } a = a + m; return this }, addCondition: function (n, m, l, o, q, p) { if (o === false) { return this } m = m.replace(".", "/"); if (!q) { if (mvcct.utils.isDate(l)) { q = 4 } else { if (mvcct.utils.isString(l)) { q = 0 } else { q = 3 } } } if (l == null) { l = "null" } else { if (q == 4) { if (p) { l = "datetime'" + mvcct.utils.ISODate(new Date(l.getTime() - l.getTimezoneOffset() * 60000), true) + "'" } else { l = "datetime'" + mvcct.utils.ISODate(l, true) + "'" } } else { l = l + ""; if (q <= 0) { if (mvcct.utils.isGuid(l)) { l = "guid'" + l + "'" } else { l = "'" + encodeURIComponent(l) + "'" } } } } if (n == mvcct.$$.substringof || n == mvcct.$$.startswith || n == mvcct.$$.endswith) { this.addStringCondition(n + "(" + m + "," + l + ") eq true") } else { if (n == mvcct.$$.substringofInv) { this.addStringCondition(mvcct.$$.substringof + "(" + l + "," + m + ") eq true") } else { this.addStringCondition(m + " " + n + " " + l) } } return this }, open: function (l, m, p) { var o = $.extend({}, k, { connector: "", filter: "" }); var n = MvcControlsToolkit_SQueryable("", l, o, p); n.father = this; return n }, close: function (l) { if ((this["father"] || null) == null) { return this } var m = this.get(); if (m != "") { m = "(" + m + ")"; this.father.addStringCondition(m, l) } return this.father } }) }; mvcct.oDataQueryable.DefaulOptions = { includeTotalcount: true, connector: "?", skip: "$skip=", top: "$top=", orderby: "$orderby=", filter: "$filter=", desc: "desc", asc: "asc" } })(); (function () { property = mvcct.utils.property; propertySet = mvcct.utils.propertySet; function b(h) { if (mvcct.utils.isString(h)) { return h.toLowerCase() } else { if (typeof h == "boolean") { return h ? "true" : "false" } else { return h } } } function e(k, i, h) { if (k == mvcct.$$.eq) { return function (l) { return b(property(l, i)) == b(h) } } else { if (k == mvcct.$$.gt) { return function (l) { return b(property(l, i)) > b(h) } } else { if (k == mvcct.$$.ge) { return function (l) { return b(property(l, i)) >= b(h) } } else { if (k == mvcct.$$.lt) { return function (l) { return b(property(l, i)) < b(h) } } else { if (k == mvcct.$$.le) { return function (l) { return b(property(l, i)) <= b(h) } } else { if (k == mvcct.$$.ne) { return function (l) { return b(property(l, i)) != b(h) } } else { if (k == mvcct.$$.startswith) { return function (m) { var l = b(property(m, i)); if (l == null || h == null) { return false } return l.indexOf(b(h)) == 0 } } else { if (k == mvcct.$$.endswith) { return function (m) { var l = b(property(m, i)); if (l == null || h == null) { return false } return l.lastIndexOf(b(h)) == l.length - h.length } } else { if (k == mvcct.$$.substringof) { return function (m) { var l = b(property(m, i)); if (l == null || h == null) { return false } return b(h).indexOf(l) >= 0 } } else { if (k == mvcct.$$.substringofInv) { return function (m) { var l = b(property(m, i)); if (l == null || h == null) { return false } return l.indexOf(b(h)) >= 0 } } } } } } } } } } } } function d(h) { return $.validator.objectHasErrors(h) } mvcct.localQueryable = function (r, t, m, w) { var q = mvcct.Queryable(t, m); var k = []; var p = []; var n = 0; var v = 1; var o = 5; var x = null; var s = null; var i = 5; function h() { var z; var A = Math.min(n, x.length); if (A == x.length) { A = A - i; if (A < 0) { A = 0 } } var B = Math.min(o, x.length - A); n = A; z = []; for (var y = 0; y < x.length; y++) { z.push(x[y]) } if (A > 0) { z.splice(0, A) } if (B == 0) { z = [] } else { if (B < z.length) { z.splice(B, z.length - B) } } return z } function u(z, B, A) { var y = null; if (x != null) { y = h() } else { y = z.get()(A) } B({ TotalCount: x.length, Results: y }) } var l = $.extend({}, q, { get: function () { var z = this.getFilter(); var y = this.getSorting(); return function (C) { var A = []; if (z != null) { for (var B = 0; B < C.length; B++) { if (z(C[B]) && !C[B]["_destroy"]) { A.push(C[B]) } } } else { for (var B = 0; B < C.length; B++) { if (!C[B]["_destroy"]) { A.push(C[B]) } } } if (y == null) { x = A } else { x = A.sort(y) } return h() } }, changeSource: function (y) { r = y; x = null }, isLocal: function () { return true }, getFilter: function () { if (k.length == 0) { return null } if (this.filterOperator() == mvcct.$$.and) { if (m) { return function (A) { var z = true; for (var y = 0; y < k.length; y++) { z = z && k[y](A) } return !z } } else { return function (A) { var z = true; for (var y = 0; y < k.length; y++) { z = z && k[y](A) } return z } } } else { if (m) { return function (A) { var z = true; for (var y = 0; y < k.length; y++) { z = z || k[y](A) } return !z } } else { return function (A) { var z = true; for (var y = 0; y < k.length; y++) { z = z || k[y](A) } return z } } } }, getSorting: function () { if (p.length == 0) { return null } return function (z, y) { for (var B = 0; B < p.length; B++) { var A = p[B](z, y); if (A != 0) { return A } } return 0 } }, execute: function (B, y, z) { if (w) { if (s) { s.dispose(); s = null } var A = this; s = r.subscribe(function (C) { if (r._reference) { var D = r._reference(); var E = D.action; D = D.reference; delete r._reference; if (x) { x.splice((E == "before" ? n : Math.min(n + o, x.length - 1)), 0, D) } } else { x = null } u(A, B, C) }); if (z) { x = null } u(this, B, ko.utils.unwrapObservable(r)) } else { if (z) { x = null } u(this, B, ko.utils.unwrapObservable(r)) } }, setState: function (y) { x = null; k = y.f; p = y.s; n = y.ps; o = y.pt; v = y.page; this.importSortingInfos(y.sortInfos, true) }, getState: function () { var y = { f: k, s: p, ps: n, pt: o, page: v, sortInfos: this.getSortingInfos() }; return y }, resetFilter: function () { k = []; x = null; return this }, resetSorting: function () { p = []; x = null; this.resetSortingInfos(); return this }, resetPaging: function () { n = 0; v = 1; return this }, setSorting: function (y) { x = null; p = y; return this }, setFilter: function (y) { x = null; k = y; return this }, setPaging: function (z, y) { if (y == null || y == "") { y = 1 } i = y; n = (z - 1) * y; o = y; v = z; return this }, addSort: function (z, A, y) { if (y === false) { return this } x = null; if (A) { p.push(function (B, C) { val1 = property(B, z); val2 = property(C, z); if (mvcct.utils.isString(val1)) { val1 = val1.toLowerCase() } if (mvcct.utils.isString(val2)) { val2 = val2.toLowerCase() } if (val1 < val2) { return 1 } else { if (val2 < val1) { return -1 } else { return 0 } } }) } else { p.push(function (B, C) { val1 = property(B, z); val2 = property(C, z); if (mvcct.utils.isString(val1)) { val1 = val1.toLowerCase() } if (mvcct.utils.isString(val2)) { val2 = val2.toLowerCase() } if (val1 < val2) { return -1 } else { if (val2 < val1) { return 1 } else { return 0 } } }) } return this }, addArrayCondition: function (z, y) { if (y === false || z == null) { return this } x = null; k = k.concat(z); return this }, addCondition: function (A, z, y, B, D) { if (B === false) { return this } var C = e(A, z, y); if (C != null) { k.push(C); x = null } return this }, open: function (y, z, B) { var A = MvcControlsToolkit_CQueryable("", y, B); A.father = this; return A }, close: function (y) { if ((this["father"] || null) == null) { return this } var z = this.getFilter(); if (z != null && y) { this.father.push(z) } return this.father } }); if ($.validator && $.validator.objectHasErrors) { l.selectErrors = function () { l.resetFilter(); k.push(d); x = null; return this } } return l }; mvcct.retrievalManager = function (n, i, m, v) { var u = null; var o = null; var q = null; var l = null; var k = false; var t = null; var p = null; var h = null; var r = null; v = v || {}; v = $.extend({}, { immediateSubmit: true, pageSize: 1000000, expression: null, data: null, updatesManager: null, entitiesContainer: null, auxLocal: null, finalContainer: null, resultsField: "Results", countField: "TotalCount", jFormsToClear: null, onSubmit: function (w) { }, htmlStatusMessages: function (w, x) { return x }, onAfterError: function (x, y, z, w) { }, onError: function (x, y, A, w) { if (!this.jFormsToClear || this.jFormsToClear.length == 0) { return } var B = this; var z = { errors: [{ name: "", id: "", errors: [this.htmlStatusMessages(y.status, w)] }] }; B.jFormsToClear.each(function () { mvcct.updatesManager.utils.refreshErrors($(this), z) }); this.onAfterError(x, y, A, w) }, dataTransform: function (w) { return w }, onAfterSuccess: function (y, w) { }, subtractViewModel: null, pageObservable: null, onSuccess: function (E, F, A, y) { if (h) { r = E.lastState } if (h && !E.isCache) { h.add(E.lastState, { evt: E, x: F, status: A }) } if (!E.page) { if (i) { E.page = i() } else { E.page = 1 } } if (!F) { F = {}; F[this.resultsField] = []; F[this.countField] = 0 } else { if (F.d) { F = F.d } else { if (mvcct.utils.isArray(F)) { var D = {}; D[this.resultsField] = F; D[this.countField] = (E.page + 1) * this.pageSize; F = D } } } if (F[this.resultsField].length == 0) { if (F[this.countField] < (E.page - 1) * this.pageSize + 1) { F[this.countField] = (E.page - 1) * this.pageSize + 1 } else { if (E.previousPage && E.previousPage < E.page) { if (i) { i(E.previousPage) } if (m) { m(E.page < 2 ? 1 : E.page - 1) } this.onAfterSuccess(E, F, A, y); return } else { F[this.countField] = 0 } } } var z = n.isLocal() ? this.dataTransform(F[this.resultsField]) : ko.mapping.fromJS(this.dataTransform(F[this.resultsField]))(); if (this.updatesManager && !n.isLocal()) { this.updatesManager.prepare(z, true, false, false) } if (!n.isLocal()) { var C = this.entitiesContainer(); this.entitiesContainer([]); if (C && mvcct.ko && mvcct.ko.unfreeze) { for (var B = 0; B < C.length; B++) { mvcct.ko.unfreeze(F) } } } this.entitiesContainer(z); if (m) { var G = Math.floor(F[this.countField] / this.pageSize); if (F[this.countField] % this.pageSize) { G++ } if (G == 0) { G = 1 } m(G) } var w = this; if (w.auxLocal) { w.auxLocal.setPaging(1, w.pageSize); if (E.type == "sort") { w.auxLocal.importSorting(E.sortString) } w.auxLocal.execute(function (H) { w.finalContainer(H.Results) }) } if (w.updatesManager && w.jFormsToClear) { if (n.isLocal()) { w.jFormsToClear.each(function () { w.updatesManager.refreshErrors($(this), null, { refreshNewControls: true }) }) } else { w.jFormsToClear.each(function () { w.updatesManager.clearUpdaterErrors($(this)) }) } } else { if (w.jFormsToClear) { MvcControlsToolkit_ServerErrors(); w.jFormsToClear.each(function () { var x = mvcct.updatesManager.global; for (var H = 0; H < x.length; H++) { if (x[B].isErrorMaster()) { x[B].refreshErrors($(this)) } } }) } } this.onAfterSuccess(E, F, A, y) } }, v); function s() { if (v.subtractViewModel && v.updatesManager) { if (mvcct.utils.isArray(v.subtractViewModel)) { v.subtractViewModel = { prop: v.subtractViewModel } } var w = v.dataTransform; v.dataTransform = function (A) { var y = []; var x = function (D, C, z) { var B = C._oldValue_; if (!B) { return } B = B()["up"]; if (!B) { return } if (B == v.updatesManager) { y.push(C) } }; mvcct.utils.visitModel(v.subtractViewModel, x, true, true); y = v.updatesManager.arrayDiff(A, y); return w(y) } } } s(); return { newCache: function (w) { h = mvcct.utils.cache(w) }, getCache: function () { return h }, invalidateCurrentCache: function () { if (h && r) { h.remove(r) } }, options: function (w) { v = $.extend(v, w); s() }, optionsSetting: function (w) { return v[w] }, submit: function (w, z) { var x = { cancel: false }; v.onSubmit(x, w, v.data); if (x.cancel) { if (l) { v.pageSize = l; if (v.pageObservable) { v.pageObservable(v.pageSize) } } if (q) { n.setState(q); n.setPaging(q.page, v.pageSize); if (i) { i(q.page) } } q = null; return } if (h) { w.lastState = JSON.stringify(n.getState(true)); var y = h.get(w.lastState); if (y) { y.evt.isCache = true; v.onSuccess(y.evt, y.x, y.status, null); return } else { w.isCache = false } } n.execute(function (A, B, C) { v.onSuccess(w, A, B, C) }, function (C, B, A) { v.onError(w, C, B, A) }, z) }, changePageSize: function (w) { v.pageSize = w; n.setPage(w) }, entitiesContainer: function () { return v.entitiesContainer }, pipe: function (x, w) { p = x; if (n.isLocal()) { n.changeSource(x.entitiesContainer()) } if (w) { this.submit({}, true) } }, declareCustomEventHandler: function (w) { t = w }, getComponents: function () { return { queryable: n, pageSizeObservable: v.pageObservable, pageObservable: i } }, getState: function () { return { pageSize: v.pageSize, queryableState: n.getState() } }, setState: function (x, w) { v.pageSize = x.pageSize; if (option.pageObservable) { option.pageObservable(v.pageSize) } n.setState(x); n.setPaging(x.page, v.pageSize); if (i) { i(x.page) } if (w) { this.submit({}, true) } }, event: function (x, w) { q = n.getState(); if (x.type == "errors") { o = v.pageSize } l = v.pageSize; if (k && x.type != "page") { k = false; if (o) { v.pageSize = o; if (v.pageObservable) { v.pageObservable(v.pageSize) } } if (u) { n.setState(u); if (x.type == "refresh") { x.page = u.page } } } if (x.type == "refresh") { this.submit(x, true); return } if (x.type == "custom") { if (t) { t(this, x, n, i) } return } if (x.type == "filter" || x.type == "errors") { x.page = 1; if (i) { i(1) } } if (x.type == "pull") { if (p) { if (x.toPull) { p.event(x.toPull, true) } if (x.immediatePull) { p.submit(x.toPull || {}, true) } } return } v.pageSize = x.itemsPerPage || v.pageSize; v.pageObservable = x.pageSizeObservable; n.setPaging(x.page, v.pageSize); if (x.type == "sort") { n.importSortingInfos(x.sorterInfos) } else { if (x.type == "filter") { n.resetFilter().importClauses(x.filterPrefix) } else { if (x.type == "errors" && n.isLocal()) { u = n.getState(); k = true; n.selectErrors() } } } if (v.immediateSubmit && !v.noSubmit) { this.submit(x) } } } }; mvcct.clientsubmit = { _queue_: [], register: function (h) { this._queue_.push(h) }, execute: function () { for (var h = 0; h < this._queue_.length; h++) { this._queue_[h]() } } }; var c = "extension"; var a = function () { return true }; var g = function () { return false }; var f = function (z, s, T, n, x, H, B) { function K() { this.collections = [] } K.prototype = { collections: null, add: function (Y, i) { Y._to_process_ = true; var X = i._oldValue_(); X.toUndo = true; this.collections.push(Y) }, process: function () { for (var Z = 0; Z < this.collections.length; Z++) { var ae = this.collections[Z]; if (!ae._to_process_) { continue } ae._to_process_ = false; var X = ae(); var ab = []; for (var aa = 0; aa < X.length; aa++) { var Y = X[aa]["_oldValue_"]; if (Y) { Y = Y() } if (Y.toUndo) { var ad = Y.ph; ad._modified(false); mvcct.utils.undo(ad); var ac = ad._oldValue_(); ac.pph = false; ac.pc = false; ad._modified(false); if (ad._destroy) { B.destroy(ad, false) } ab.push(ad) } else { ab.push(X[aa]) } } ae(ab) } } }; var w = new Array(); if (!n) { throw "keyExpression is not optional" } B = B || {}; var U = null; var O = mvcct.updatesManager._count; var R = null; var q = null; mvcct.updatesManager._count++; var D = null; var A = null; var h = false; var E = null; function p(Y, X) { var i = ko.utils.unwrapObservable(X); if (ko.utils.unwrapObservable(i._inserted)) { B.dispose(i); Y.remove(i) } else { B.destroy(i, true, Y); i._modified(false) } if (i._last_detail_) { i._last_detail_()(null) } } function S(aa, X, ag) { var ae = false; if (!X) { X = new Array(); X.root = ag; ae = true } if (!aa) { aa = mvcct.utils.property(s, T) } if (B.children) { for (var ab = 0; ab < B.children.length; ab++) { var ad = X["_" + B.children[ab].updater.getId()]; var Y = false; var ac = false; if (!ad) { if (X.root == B.children[ab].updater) { ad = B.children[ab].updater.getData(); ac = true } else { ad = [] } Y = true; X["_" + B.children[ab].updater.getId()] = ad } var af = B.children[ab].expression; for (var Z = 0; Z < aa.length; Z++) { if (!B.processChildren(aa[Z]) || aa[Z]._destroy) { continue } var ah = mvcct.utils.property(aa[Z], af); if (mvcct.utils.isArray(ah)) { ad.push.apply(ad, ah); B.children[ab].updater.copyChildrenRecursive(ah, X) } } if (Y) { B.children[ab].updater.newSource(ad, ac) } } } } function I(ac) { var X = false; if (!ac) { ac = new Array(); X = true } if (ac["_" + O]) { return } ac["_" + O] = true; if (B.isChild && R) { var aa = x; if (H) { aa = property(x, H) } var Z = []; for (var Y = 0; Y < R.length; Y++) { var ab = R[Y]; if (ab._fatherReference !== undefined) { Z.push(ab._fatherReference) } else { Z.push(-1) } } aa[B.updater.f] = Z } if (B.children) { for (var Y = 0; Y < B.children.length; Y++) { B.children[Y].updater.computeFatherReferences(ac) } } } var v = null; var r = false; function m(i) { if (!v) { return i } else { if (r) { return [v, i] } else { return [v, i] } } } function J(i) { var Y = mvcct.utils.property(s, T); var X = function (ac, ab, Z) { var aa = ab._oldValue_; if (!aa) { return } aa = aa()["up"]; if (!aa) { return } aa.pushChange(ab, ac, true, i) }; mvcct.utils.visitModel(Y, X, true, true) } function P(Y) { if (ko.utils.unwrapObservable(Y._inserted) || Y._destroy) { return true } if ((ko.utils.unwrapObservable(Y._modified) || B.automodified) && mvcct.utils.changed(Y)) { return true } if (B.children) { for (var X = 0; X < B.children.length; X++) { var Z = B.children[X]; if (Z.updater.hasChanges(Y, Z.expression)) { return true } } } return false } function F(al) { var at = q; if (!at) { at = mvcct.utils.property(s, T) } if (!mvcct.utils.isArray(at)) { return } var ac = []; var X = []; var af = []; var ad = []; var ar = []; var Y = []; var aj = []; var ab = []; var aa = false; var ai = 0; for (var an = 0; an < at.length; an++) { var aq = ko.utils.unwrapObservable(at[an]); var ah; var ao = aq._oldValue_; if (ao) { ao = ao() } ah = ko.utils.unwrapObservable(aq._inserted); if (ah) { ac.push(mvcct.utils.updateCopy(aq)); Y.push(aq); ad.push(aq.ModelPrefix + "[" + aq._tag); aa = true; t.validate(al, aq); if (B.children) { for (var ak = 0; ak < B.children.length; ak++) { var Z = B.children[ak].expression; var ag = mvcct.utils.property(aq, Z); if (mvcct.utils.isArray(ag)) { for (var am = 0; am < ag.length; am++) { ag[am]._fatherReference = ai } } } } ai++; continue } ah = aq._destroy; if (ah) { if ((!ao) || (!ao.ph)) { X.push(mvcct.utils.property(aq, n)); aa = true } continue } ah = ko.utils.unwrapObservable(aq._modified); if (B.automodified || ah) { if (mvcct.utils.changed(aq)) { t.validate(al, aq); aj.push(aq); af.push(mvcct.utils.updateCopy(aq)); ar.push(aq.ModelPrefix + "[" + aq._tag); aa = true } else { aq._modified(false) } continue } } var ap = false; var ae = {}; ae[B.updater.i] = ac; ae[B.updater.ei] = []; ae[B.updater.eu] = []; ae[B.updater.u] = af; ae[B.updater.d] = X; if (B.isChild) { ae[B.updater.f] = ab } U = ae; if (!H) { if (!x) { ap = true } x = ae } else { if (!x) { x = {}; ap = true; mvcct.utils.propertySet(x, H, ae) } else { mvcct.utils.propertySet(x, H, ae) } } R = Y; E = { changes: aa, i: ad, u: ar, _justCreated_: ap, inserted: Y, updated: aj }; return E } function k(aa, Z, X) { if (!B.processChildren(aa)) { return } if (B.children) { for (var Y = 0; Y < B.children.length; Y++) { var ab = B.children[Y]; ab.updater.resetAll(null, aa, ab.expression, X) } } } function N(X, i) { return i ? (X._tag > -1 ? X.ModelPrefix + "[" + X._tag + "]" : null) : X.ModelPrefix } function u(al, aa) { if (!al || !al.errors) { return } var ai = []; var Z = H ? mvcct.utils.property(x, H) : x; for (Q = 0; Q < al.errors.length; Q++) { curr = al.errors[Q]; if (curr._pocessed || !curr.name) { ai.push(curr); continue } if (H && curr.name != "") { var aj = curr.name.indexOf(H); if (aj >= 0 && (aj == 0 || aj == curr.name.indexOf(".") + 1)) { if (aj > 0) { curr.name = curr.name.substring(aj); curr.id = mvcct.utils.idFromName(curr.name) } } else { ai.push(curr); continue } } else { if (!H && curr.name != "") { var aj = curr.name.indexOf("."); if (aj >= 0 && !Z[curr.name.substring(0, aj)]) { curr.name = curr.name.substring(aj + 1); curr.id = mvcct.utils.idFromName(curr.name) } } else { if (curr.name == "") { ai.push(curr); continue } } } curr._processed = true; curr.updater = "u" + O; if (H && curr.name.indexOf(H) != 0) { ai.push(curr); continue } var ac = H ? curr.name.substring(H.length + 1) : curr.name; var af = Z; if (T) { ac = T + "." + ac; af = s } if (!ac) { ai.push(curr); continue } var ak = ac.split(/[\[\.\]]+/); var ah = []; for (var ad = 0; ad < ak.length; ad++) { if (ak[ad]) { ah.push(ak[ad]) } } var ag = null; var ab = null; var ae = null; for (var ad = 0; ad < ah.length; ad++) { ag = mvcct.utils.isArray(af); if (mvcct.utils.isObject(af) && af.ModelPrefix) { ab = ac; ae = af } af = af[ag ? parseInt(ah[ad]) : ah[ad]]; af = ko.utils.unwrapObservable(af); ag = mvcct.utils.isArray(af); if (ac && !ag) { var Y = ac.indexOf("."); ac = Y >= 0 ? ac.substring(Y + 1) : null } } ag = mvcct.utils.isArray(af); if (mvcct.utils.isObject(af) && af.ModelPrefix) { ab = ac; ae = af } if (ae) { var i = { _processed: true, errors: curr.errors, name: [], id: [], updater: "u" + O }; var X = N(ae, true); if (X) { X = X + (ab ? "." + ab : ""); i.name.push(X); i.id.push(mvcct.utils.idFromName(X)) } else { X = N(ae, false) + (ab ? "." + ab : ""); i.name.push(X); i.id.push(mvcct.utils.idFromName(X)) } ai.push(i) } else { ai.push(curr) } } al.errors = ai } function l(ad, ae, Z) { if (!ad) { return } iPrefix = H ? H + "." + B.updater.i : B.updater.i; uPrefix = H ? H + "." + B.updater.u : B.updater.u; for (var ab = 0; ab < ad.length; ab++) { if (ad[ab]["_pocessed"]) { continue } var Y = ad[ab].name.indexOf(uPrefix); var ac = ad[ab].name.indexOf(iPrefix); if (ad[ab].name != "") { var af = false; if (ac >= 0 && (ac == 0 || ac == ad[ab].name.indexOf(".") + 1)) { if (ac > 0) { ad[ab].name = ad[ab].name.substring(ac) } } else { if (Y >= 0 && (Y == 0 || Y == ad[ab].name.indexOf(".") + 1)) { if (Y > 0) { ad[ab].name = ad[ab].name.substring(Y) } } else { continue } } } else { continue } var X = null; var aa = mvcct.utils.changeIndex(iPrefix, "", ad[ab].name, function (i) { if (i >= ae.i.length) { return null } X = i; if ($.validator.declareServerError && i < ae.inserted.length) { $.validator.declareServerError(ae.inserted[i]) } return ae.i[i] }); if (!aa) { X = null; aa = mvcct.utils.changeIndex(uPrefix, "", ad[ab].name, function (i) { if (i >= ae.u.length) { return null } X = i; if ($.validator.declareServerError && i < ae.updated.length) { $.validator.declareServerError(ae.updated[i]) } return ae.u[i] }) } if (aa) { aa = aa.substring(1); ad[ab]._pocessed = true; ad[ab].name = aa; ad[ab].id = mvcct.utils.idFromName(aa); ad[ab].updater = "u" + O } } } function y(i, Z, aa) { if (Z) { D = aa; return } if (!z) { throw "updateUrl is not optional" } var Y = ko.mapping.toJS(x); var X = mvcct.utils.stringify(Y, B.isoDate); $.ajax({ url: z, contentType: "application/json", data: X, dataType: "text", type: "POST", success: function (ac, ad, ab) { ac = $.parseJSON(ac); if (!ac) { ac = { errors: null } } else { if (ac.errors && mvcct.utils.isArray(ac.errors) && ac.errors.length == 0) { ac.errors = null } else { if (!ac.errors) { ac.errors = null } } } aa(ac, i, ab.status) }, error: function (ad, af, ab) { var ag = ad.responseText || null; var ae = {}; try { ae = ag ? $.parseJSON(ag) : {} } catch (ac) { } if (mvcct.utils.isArray(ae)) { ae = { errors: ae } } if (!ae.errors) { ae.errors = null } if (mvcct.utils.isArray(ae.errors) && ae.errors.length == 0) { ae.errors = null } if (!ae.errors) { ae.errors = [{ name: "", id: "", errors: [B.htmlStatusMessages(ad.status, ab)] }] } aa(ae, i, ad.status) } }) } function W(aa, ad, X, ac) { if (!aa) { return } for (var Z = 0; Z < ad.length; Z++) { var i = ad[Z]; var Y = ac; if (i.children) { if (i.U !== undefined && B.updatersIndices) { if (i.U >= 0 && i.U < B.updatersIndices.length) { Y = B.updatersIndices[i.U] } } W(mvcct.utils.propertyComplete(aa, i.destinationExpression, true), i.children, X, Y); continue } if (!i.destinationExpression) { if (B.classifyEntity && B.updatersIndices) { i.newValue = ko.mapping.fromJS(i.newValue); mvcct.utils.visitModel(i.newValue, function (ah, af, ag) { up = B.classifyEntity(af); if ((up || up === 0) && up < B.updatersIndices.length) { B.updatersIndices[up].prepare(af, true, false, false, null, true) } }, true, true) } if (X) { ko.mapping.fromJS(i.newValue, X, aa) } else { ko.mapping.fromJS(i.newValue, {}, aa) } } else { if (i.U !== undefined && B.updatersIndices) { if (i.U >= 0 && i.U < B.updatersIndices.length) { Y = B.updatersIndices[i.U] } } var ae = i.newValue; if (ae) { var ab = mvcct.utils.classof(ae); if (ab == "array" || ab == "object") { ae = ko.mapping.fromJS(ae); if (!Y && B.classifyEntity) { Y = B.classifyEntity(ae) } if (Y) { Y.prepare(ae, true, false, false, null, true) } } } mvcct.utils.propertySetComplete(aa, i.destinationExpression, ae) } } } function V(i) { if ((!i) || i.length == 0) { i = $("#_DynamicJSonFormtoSubmit_"); if (i.length == 0) { if (!z) { throw "updateUrl is not optional" } $("body").first().prepend("<form id='_DynamicJSonFormtoSubmit_' action='" + z + "' method='post'><input type='hidden' name='display.$$' value='MVCControlsToolkit.Controls.Bindings.JSONAdapter' /><input type='hidden' name='$.JSonModel' value='' class='JSonModeltoSubmit' /></form>"); i = $("#_DynamicJSonFormtoSubmit_"); i.find(".JSonModeltoSubmit").val(mvcct.utils.stringify(ko.mapping.toJS(x), B.isoDate)) } } i.submit() } function L(ac, Z) { if (ac == null) { ac = mvcct.utils.property(s, T) } if (!mvcct.utils.isArray(ac)) { return } for (var ab = 0; ab < ac.length; ab++) { if (B.children && B.processChildren(ac[ab])) { for (var Y = 0; Y < B.children.length; Y++) { var ae = mvcct.utils.property(ac[ab], B.children[Y].expression); if (!mvcct.utils.isArray(ae)) { continue } var aa = []; var ad = false; for (var X = 0; X < ae.length; X++) { if (!(ae[X]["_destroy"])) { aa.push(ae[X]) } else { ad = true; B.dispose(ae[X]) } } if (ad) { mvcct.utils.propertySet(ac[ab], B.children[Y].expression, aa) } if (Z) { B.children[Y].updater.removeDeletedChildren(ae, true) } } } } } function o(aa, Z) { if (!Z) { Z = {} } var ab = "u" + aa.getId(); if (!Z[ab]) { Z[ab] = true; var Y = aa.optionsSetting("children"); if (Y) { if (!mvcct.utils.isArray(Y)) { Y = [Y] } for (var X = 0; X < Y.length; X++) { o(Y[X].updater, Z) } } } return Z } function M(X, Y) { if (!$.validator.getObjectInErrorList) { return true } if (t.validate(X)) { return true } var Z = $.validator.getObjectInErrorList(X); var i = $.validator.objectErrors(X); if (i) { A = i; if (!Y) { t.refreshErrors(X) } } B.onObjectErrors(Z); return false } function C(ah, ai, ag, X) { var ac = q; if (!ac) { ac = mvcct.utils.property(s, T) } if (!mvcct.utils.isArray(ac)) { return } if (ai && ai.insertedKeys) { if (mvcct.utils.isArray(ai.insertedKeys)) { for (var ad = 0; ad < ai.insertedKeys.length; ad++) { var af = ai.insertedKeys[ad]; if (af && (!H || H == af.destinationExpression)) { var ab = af.keys; if (ab && ab.length) { ab = ko.utils.unwrapObservable(ko.mapping.fromJS(ab)); var aa = ag.inserted; for (var Z = 0; Z < ab.length; Z++) { ah.newKey(aa[Z], ab[Z]) } } break } } } else { if (mvcct.utils.isObject(ai.insertedKeys)) { var ab = ai.insertedKeys[H]; if (ab) { ab = ko.utils.unwrapObservable(ko.mapping.fromJS(ab)); var aa = ag.inserted; for (var Z = 0; Z < ab.length; Z++) { ah.newKey(aa[ad], ab[Z]) } } } } } for (var ad = 0; ad < ac.length; ad++) { if (!ac[ad]["_destroy"]) { ah.accepted(ac[ad]) } } if (X && X.root == ah && s && T) { X.root = null; var Y = mvcct.utils.property(s, T); if (mvcct.utils.isArray(Y)) { var ae = []; for (var ad = 0; ad < Y.length; ad++) { if (!Y[ad]["_destroy"]) { ae.push(Y[ad]) } else { B.dispose() } } mvcct.utils.propertySet(s, T, ae) } } } B = $.extend({}, { updater: { u: "Modified", eu: "ExternalModified", i: "Inserted", ei: "ExternalInserted", d: "Deleted", f: "FatherReferences" }, onUpdateStart: function (i) { }, onUpdateComplete: function G(Y, i, X) { }, updateCallback: function (Y, i, X) { }, updatingCallback: function (X, i, Y) { return true }, prepareCallback: function (i) { }, isChild: false, automodified: false, destroy: function (i, Y, X) { if (Y && X) { X.destroy(i) } else { i._destroy = Y } }, htmlStatusMessages: function (i, X) { return X }, dispose: (mvcct.ko && mvcct.ko.unfreeze ? mvcct.ko.unfreeze : function (i) { }), processChildren: function (i) { return true }, updatersIndices: null, classifyEntity: null, objectKey: false, Errors: function () { return null }, itemErrors: function (i) { return null }, onObjectErrors: function (i) { } }, B); if (B.children) { if (!mvcct.utils.isArray(B.children)) { B.children = [B.children] } for (var Q = 0; Q < B.children.length; Q++) { w[B.children[Q].expression] = B.children[Q] } } var t = { childrenLookUp: function (i) { return w[i] }, arrayDiff: function (X, i, Y) { return mvcct.utils.arrayDiff(X, i, n, B.objectKey, Y, true) }, removeDeleted: function () { var X = mvcct.utils.property(s, T); if (mvcct.utils.isArray(X)) { var Z = []; for (var Y = 0; Y < X.length; Y++) { if (!X[Y]["_destroy"]) { Z.push(X[Y]) } else { B.dispose() } } mvcct.utils.propertySet(s, T, Z) } if (B.children && B.children.length > 0) { L(null, true) } }, removeDeletedChildren: L, copyChildrenRecursive: function (i, X) { S(i, X, this) }, computeFatherReferences: I, getId: function () { return O }, getData: function () { var i = property(s, T); if (i) { return i.slice() } else { return [] } }, options: function (i) { B = $.extend(B, i) }, optionsSetting: function (i) { return B[i] }, declareChild: function () { B.isChild = true }, modelTracking: function (i, Y) { var X = T ? mvcct.utils.property(s, T) : s; if (i) { v = mvcct.utils.cloneDeep(X) } else { v = null } r = Y }, hasChanges: function (Y, aa) { var ab = null; var Z = null; if (Y && aa) { ab = property(Y, aa, true) } Z = ab || mvcct.utils.property(s, T); Z = ko.utils.unwrapObservable(Z); for (var X = 0; X < Z.length; X++) { if (P(Z[X])) { return true } } return false }, filterObservable: function (ae, ag, Y) { ag = ag || mvcct.utils.property(s, T, true); if (!ag) { return } var ab = null; if (ae) { ab = ae["_" + O] } var ac = null; if (Y) { ac = Y["_" + O] } if (!ab && !ac) { return } this.arrayDiff(ag, ab, ac); if (B.children) { var aa = ag(); for (var X = 0; X < aa.length; X++) { var ad = aa[X]; for (var Z = 0; Z < B.children.length; Z++) { var af = B.children[Z]; if (af && af.updater) { af.updater.filterObservable(ae, mvcct.utils.property(ad, af.expression, true)) } } } } return ag }, pushChange: function (X, Z, Y, i) { if (!U) { return } if (ko.utils.unwrapObservable(X._inserted)) { this.validate(i, X); var aa = mvcct.utils.updateCopy(X); if (!Y) { U[B.updater.i].push(aa) } R.push(aa); U[B.updater.ei].push(Z); E.i.push(X.ModelPrefix + "[" + X._tag); E.changes = true } else { if (X._destroy) { if (!Y) { U[B.updater.d].push(mvcct.utils.property(X, n)) } } else { if (B.automodified || ko.utils.unwrapObservable(X._modified)) { if (mvcct.utils.changed(X)) { this.validate(i, X); if (!Y) { U[B.updater.u].push(mvcct.utils.updateCopy(X)) } U[B.updater.eu].push(Z); E.u.push(X.ModelPrefix + "[" + X._tag); E.changes = true } } } } }, addChildUpdateManager: function (i, X, Y) { if (!B.children) { B.children = [] } B.children.push(i); w[i.expression] = i; if (!i.updater && X && Y) { if (!x) { x = {} } i.updater = mvcct.updatesManager(null, null, null, X, x, Y) } i.updater.declareChild(); return i.updater }, unprepare: function (aa) { if (!aa) { return } aa = ko.utils.unwrapObservable(aa); if (!mvcct.utils.isArray(aa)) { aa = [aa] } for (var Y = 0; Y < aa.length; Y++) { var Z = aa[Y]; delete Z._inserted; delete Z._modified; delete Z._destroy; delete Z.ModelPrefix; delete Z.ModelId; delete Z._tag; delete Z._oldValue_; delete Z._errorStatus; delete Z.__instance_errors__ } if (B.children) { for (var X = 0; X < B.children.length; X++) { B.children[X].updater.unprepare(mvcct.utils.property(Z, B.children[X].expression)) } } }, prepare: function (ae, X, Z, ab, af, Y) { if (!ae) { return } ae = ko.utils.unwrapObservable(ae); if (!mvcct.utils.isArray(ae)) { ae = [ae] } for (var ad = 0; ad < ae.length; ad++) { var ac = ae[ad]; if (!ac._inserted) { ac._inserted = ko.observable(false) } if (!ac._modified) { ac._modified = ko.observable(false) } if (Y) { ac._modified(true) } if (X) { mvcct.utils.Track(ac, Z, ab, this) } mvcct.updatesManager.utils.prepare(ac, af || T, !MvcControlsToolkit_ServerErrors_Last && (B.isChild || (z && z != "dummy"))); if (B.children) { for (var aa = 0; aa < B.children.length; aa++) { var ag = ac.ModelPrefix + "[" + ac._tag + "]." + B.children[aa].expression; B.children[aa].updater.prepare(mvcct.utils.property(ac, B.children[aa].expression), X, Z, ab, ag) } } B.prepareCallback(ac) } }, getObjectLevelerrors: function (i) { if (i) { return B.itemErrors(i) } else { if (s && T) { i = mvcct.utils.property(s, T) } else { i = q } if (!i) { return null } return B.Errors(i) } }, validate: function (X, i) { if (!$.validator.objectHasUnobtrusiveErrors) { return true } if (i) { if (!$.validator.objectHasUnobtrusiveErrors(i)) { var aa = this.getObjectLevelerrors(i); if (aa) { var Z = N(i, true); $.validator.markEntityInError(i, { _processed: true, errors: aa, name: Z, id: mvcct.utils.idFromName(Z) }, X); $.validator.addObjectToErrorList(X, i); return false } else { return true } } else { $.validator.addObjectToErrorList(X, i); $.validator.addObjectError(X, $.validator.getEntityErrors(i)); return false } return true } else { var Y = $.validator.objectErrors(X); if (Y) { Y = Y.errors } if (Y && Y.length > 0) { return false } var aa = this.getObjectLevelerrors(); if (aa) { $.validator.addObjectError(X, { _processed: true, errors: aa, name: "", id: "" }); return false } else { return true } } }, newSource: function (X, i) { if (s && T && (!i)) { mvcct.utils.propertySet(s, T, X) } else { q = X } }, isErrorMaster: function () { return h }, refreshErrors: function (X, i, Y) { if (!i) { i = A } mvcct.updatesManager.utils.refreshErrors(X, i, Y) }, clearErrors: function (i, X) { this.refreshErrors(i, { errors: null }); if (X && A) { A.errors = null } }, clearUpdaterErrors: function (Y) { var ab = o(this); if (A && A.errors) { var X = []; for (var Z = 0; Z < A.errors.length; Z++) { var aa = A.errors[Z]; if ((!aa.updater) || (!ab[aa.updater])) { X.push(aa) } } A.errors = X } this.refreshErrors(Y) }, modified: function (ab, X, Z, aa, Y) { var i = ko.utils.unwrapObservable(ab); if ((!ko.utils.unwrapObservable(i._inserted)) && (!i._destroy)) { if (Z) { i._modified(mvcct.utils.changed(ab)) } else { if (X) { i._modified(true); mvcct.utils.Track(ab, aa, Y) } else { i._modified(true) } } } }, inserted: function (Y, X) { var i = ko.utils.unwrapObservable(X); Y.push(X); i._inserted(true) }, deleted: function (Z, Y, i, X) { this._deleted(Z, Y, i); this.refreshErrors(X, $.validator && $.validator.objectErrors ? $.validator.objectErrors(X) : null, { prefixToRemove: Y }) }, _deleted: function (ad, ag, Z) { var ae = ko.utils.unwrapObservable(ag); if (Z && B.children) { for (var ac = 0; ac < B.children.length; ac++) { var af = B.children[ac].expression; var X = mvcct.utils.property(ag, af, true); if (X) { var ab = ko.utils.unwrapObservable(X); for (var aa = 0; aa < ab.length; aa++) { var Y = ko.utils.unwrapObservable(ab); if (ab[aa]._destroy) { continue } B.children[ac].updater._deleted(X, ab[aa], Z) } } } } if (ko.utils.unwrapObservable(ae._inserted)) { B.dispose(ae); ad.remove(ae) } else { B.destroy(ae, true, ad) } if (ae._last_detail_) { ae._last_detail_()(null) } }, arrayChanged: function (i) { return ko.computed(function () { var Z = ko.utils.unwrapObservable(i); for (var Y = 0; Y < Z.length; Y++) { var X = Z[Y]; if (X._destroy || X._inserted() || X._modified()) { return true } } return false }) }, accepted: function (X) { var i = ko.utils.unwrapObservable(X); var Z = i._destroy || i._inserted() || i._modified(); B.destroy(i, false); i._inserted(false); i._modified(false); if (Z) { var Y = i._oldValue_; if (Y) { Y = Y(); Y.ph = false; Y.pph = false; Y.pc = false; mvcct.utils.restoreEntity(i, Y.value, Y.vr) } } }, newKey: function (aa, ac, X) { X = X || n; mvcct.utils.propertySet(aa, X, ac); if (B.children) { for (var Y = 0; Y < B.children.length; Y++) { var Z = B.children[Y]; var ab = mvcct.utils.property(aa, Z.expression); if (ab) { for (j = 0; j < ab.length; j++) { mvcct.utils.propertySet(ab[j], Z.external, ac) } } } } }, externalOf: function (i) { var X = w[i]; if (X) { return X.external } else { return null } }, updaterOf: function (i) { var X = w[i]; if (X) { return X.updater } else { return null } }, moveChild: function (Z, aa, Y, ad, X, i, ab, ac) { this.addChild(aa, Y, ad, false, X, i, ab, Z, ac) }, move: function (X, Z, i, Y, aa) { this.addChild(null, null, Z, false, null, i, Y, X, aa) }, add: function (aa, i, Y, X, Z, ab) { this.addChild(null, null, aa, i, Y, X, Z, null, ab) }, addChild: function (ao, ar, ac, aq, aj, at, am, ad, ae) { var Z = null; var af = false; var ap = null; var X = null; if (B.isChild && mvcct.utils.currentModel && !ao && ar.indexOf("#@.") == 0) { ao = mvcct.utils.currentModel; ar = ar.substring(3); var Y = ao._oldValue_; if (Y && Y().up) { Z = Y().up.childrenLookUp(ar) } else { Z = { updater: this } } af = false } if (ao && ar) { Z = Z || w[ar]; ap = property(ao, ar, true); X = ko.utils.unwrapObservable(ap); if (!mvcct.utils.isArray(X)) { X = []; ap = ko.observableArray(X); propertySet(ao, ar, ap, true) } if (!Z) { Z = { updater: this }; af = true } } else { af = true; ap = property(s, T, true); X = ko.utils.unwrapObservable(ap); if (!mvcct.utils.isArray(X)) { X = []; ap = ko.observableArray(X); propertySet(s, T, ap, true) } Z = { updater: this } } if (!Z) { return } var aa = null; if (!aq && ad) { aa = ad() } var ak = ac._oldValue_; if (X != aa) { var ab = null; if (!af) { ab = ao.ModelPrefix + "[" + ao._tag + "]." + ar } if (ak) { ak = ak(); Z.updater.prepare(ac, true, ak.vr, ak.ca, ab) } else { Z.updater.prepare(ac, true, false, false, ab); ak = ac._oldValue_() } } else { ak = ak() } if (!aq && ad) { aa = ad(); var ag = null; if (!ac._inserted() && !ak.pph) { ag = mvcct.utils.cloneEntity(ac, ak.vr, ak.ca) } var an = []; for (var ah = 0; ah < aa.length; ah++) { var al = ko.utils.unwrapObservable(aa[ah]); if (al != ac) { an.push(al) } else { if (ag != null) { an.push(ag) } } } if (ag) { var ai = { value: ak.value, vr: ak.vr, ca: ak.ca, ph: ac }; ag._oldValue_ = function () { return ai }; ak.pph = ag; ak.pc = ad; B.destroy(ag, true); ag._modified(false); ac._inserted(false); ac._modified(true) } if (X == aa) { X = an; ad(an) } else { ad(an) } } if (!af) { var au = property(ao, aj || n); propertySet(ac, Z.external, au) } if (at) { var an = []; if (!am) { an.push(ac) } for (var ah = 0; ah < X.length; ah++) { var al = ko.utils.unwrapObservable(X[ah]); if (al == am) { if (ae) { an.push(ac); an.push(al) } else { an.push(al); an.push(ac) } } else { an.push(al) } } ap(an) } else { X.push(ac); ap(X) } if (aq) { ac._inserted(true) } }, newResult: function (i, X) { if (D) { var Y = D; D = null; Y(i, this, X) } }, reset: function (Z, i, ac, ab) { this.modified(Z, true, true); var Y = new K(); if (ko.utils.unwrapObservable(Z._modified)) { var X = Z._oldValue_; if (X) { X = X() } if (X.pph && X.pc) { var aa; if (ac) { aa = ac } else { aa = mvcct.utils.property(s, T, true) } aa.remove(Z); Y.add(X.pc, X.pph) } else { mvcct.utils.undo(Z); Z._modified(false) } } else { if (ko.utils.unwrapObservable(Z._inserted)) { var aa; if (ac) { aa = ac } else { aa = mvcct.utils.property(s, T, true) } B.dispose(Z); aa.remove(Z) } } if (!ab) { k(Z, null, Y) } Y.process(); if ($.validator && $.validator.ClearEntityErrorState) { $.validator.ClearEntityErrorState(Z) } if (i) { this.refreshErrors(i, null, { prefixToRemove: Z }) } }, addRelated: function (ai, ah, ab, aj, ak) { var ae = mvcct.utils.property(s, T); if (!ae) { return } ak = ak || n; ah = ko.utils.unwrapObservable(ah); if (!mvcct.utils.isArray(ah)) { ah = [ah] } var aa = new Array(); for (var af = 0; af < ah.length; af++) { var Y = mvcct.utils.property(ah[af], ab); var X = aa[Y]; if (X) { X.push(ah[af]) } else { aa[Y] = [ah[af]] } } for (var af = 0; af < ae.length; af++) { var al = aa[mvcct.utils.property(ae[af], ak)]; var ag = mvcct.utils.property(ae[af], ai, true); if (al) { if (ko.isObservable(ag)) { var Z = ko.utils.unwrapObservable(ag); Z.push.apply(Z, al); ag(Z) } else { if (ag && mvcct.utils.isArray(ag)) { ag.push.apply(ag, al) } else { mvcct.utils.propertySet(ae[af], ai, ko.observableArray(al)) } } if (aj) { for (var ac = 0; ac < al.length; ac++) { var ad = mvcct.utils.property(al[ac], aj, true); if (ko.isObservable(ad)) { ad.push(ae[af]) } else { if (ad && mvcct.utils.isArray(ad)) { ad.push(ae[af]) } else { mvcct.utils.propertySet(al[ac], aj, ko.observableArray([ae[af]])) } } } } } else { if (!ag) { mvcct.utils.propertySet(ae[af], ai, ko.observableArray([])) } } } }, resetAll: function (ab, ag, ae, ac) { var ad = null; var aa = null; var X = false; if (!ac) { ac = new K(); X = true } if (ag && ae) { ad = property(ag, ae, true) } aa = ad || mvcct.utils.property(s, T); aa = ko.utils.unwrapObservable(aa); if (!aa) { return } var af = []; for (var Z = 0; Z < aa.length; Z++) { var ah = aa[Z]; var Y = ah._oldValue_; if (Y) { Y = Y() } if (Y && Y.pph && Y.pc) { ac.add(Y.pc, Y.pph); continue } else { if (ko.utils.unwrapObservable(ah._inserted)) { B.dispose(ah); continue } else { if (ah._destroy) { if ((!Y) || (!Y.ph)) { B.destroy(ah, false); if (B.automodified || ko.utils.unwrapObservable(ah._modified)) { mvcct.utils.undo(ah); ah._modified(false) } } } else { if (B.automodified || ko.utils.unwrapObservable(ah._modified)) { mvcct.utils.undo(ah); ah._modified(false) } } } } af.push(ah); if ($.validator && $.validator.ClearEntityErrorState) { $.validator.ClearEntityErrorState(ah) } k(ah, null, ac) } if (X) { ac.process() } if (ad) { ad(af); this.refreshErrors(ab, null, { prefixToRemove: ag.ModelPrefix + "[" + ag._tag + "]" }) } else { A = null; mvcct.utils.propertySet(s, T, af); if (ab) { this.refreshErrors(ab) } } }, submit: function (Z, ad, X, ae) { if (B.updatersIndices) { X = X || B.updatersIndices } if (!ad) { B.onUpdateStart(s) } var ab = false; if (X) { if (!mvcct.utils.isArray(X)) { X = [X] } for (var aa = 0; aa < X.length; aa++) { if (X[aa].submit(Z, true)) { ab = true } } } var Y = false; if (!ae) { ae = new Array(); ae.root = this; Y = true } if (ae["_" + O]) { return false } ae["_" + O] = true; if (Y) { S(null, null, this) } var ac = F(Z); if (ab) { ac.changes = true } if (B.children) { for (var aa = 0; aa < B.children.length; aa++) { if (B.children[aa].updater.submit(Z, true, null, ae)) { ac.changes = true } } } if (!M(Z, ad)) { return false } if (Y) { I() } if (!ac.changes) { return false } if (!B.updatingCallback(ac.changes, x, H)) { return false } if (!ad && ac.changes) { V(Z); return true } else { return ac.changes } }, submitComplexModel: function (Y, ac, X) { if (B.updatersIndices) { X = X || B.updatersIndices } if (!ac) { B.onUpdateStart(s) } if (X) { if (!mvcct.utils.isArray(X)) { X = [X] } for (var aa = 0; aa < X.length; aa++) { X[aa].submit(Y, true) } } var ab = T ? mvcct.utils.property(s, T) : s; J(Y); if (!M(Y, ac)) { return false } var Z = m(ab); if (!x) { x = Z } if (x && H) { mvcct.utils.propertySet(x, H, Z) } else { x = Z } if (!ac) { V(Y); return true } else { return true } }, update: function (Z, af, ad, ab, Y) { if (af) { Y = ab; ab = false } if (B.updatersIndices) { ad = ad || B.updatersIndices; ab = true } var X = false; if (!af) { B.onUpdateStart(s) } if ((!af) && ab && ad) { if (!mvcct.utils.isArray(ad)) { ad = [ad] } for (var aa = 0; aa < ad.length; aa++) { if (ad[aa].update(Z, true)) { X = true } } } var ac = false; if (!Y) { Y = new Array(); Y.root = this; ac = true } if (Y["_" + O]) { return false } Y["_" + O] = true; if (ac) { S(null, null, this) } var ae = F(Z); if (X) { ae.changes = true } if (B.children) { for (var aa = 0; aa < B.children.length; aa++) { if (B.children[aa].updater.update(Z, true, null, Y)) { ae.changes = true } } } if (!M(Z, af)) { return false } if (ac) { I() } if (!af && !ae.changes) { return false } if (!B.updatingCallback(ae.changes, x, H)) { return false } y(this, af, function (ag, ai, ah) { if (!ae.changes) { return } if (ag.errors) { l(ag.errors, ae, Z) } var ak = { setErrors: true, model: s, expression: T, key: n, success: !ag.errors }; B.updateCallback(ak, ag, ah); A = ag; if (!af && $.validator && $.validator.setObjectErrors) { $.validator.setObjectErrors(Z, A) } if (!ag.errors) { C(ai, ag, ae, Y) } q = null; if (B.children) { for (var aj = 0; aj < B.children.length; aj++) { B.children[aj].updater.newResult(ag, ah) } if ((!ag.errors) && (ac)) { L(null, true) } } if (ad) { if (!mvcct.utils.isArray(ad)) { ad = [ad] } for (var aj = 0; aj < ad.length; aj++) { ad[aj].newResult(ag, ah) } } if (ak.setErrors && (!af)) { ai.refreshErrors(Z, ag); h = true } else { h = false } if (!af) { B.onUpdateComplete(ak, ag, ah) } }); return ae.changes }, updateComplexModel: function (ab, ad, X, Y) { if (B.updatersIndices) { X = X || B.updatersIndices; Y = true } if (Y && X) { if (!mvcct.utils.isArray(X)) { X = [X] } for (var aa = 0; aa < X.length; aa++) { X[aa].update(ab, true) } } var ac = T ? mvcct.utils.property(s, T) : s; J(ab); if (!M(ab, ad)) { return false } var Z = m(ac); if (!x) { x = Z } if (x && H) { mvcct.utils.propertySet(x, H, Z) } else { x = Z } if (!ad) { B.onUpdateStart(s) } y(this, ad, function (ae, ag, af) { var ai = { setErrors: true, model: s, expression: T, success: !ae.errors }; B.updateCallback(ai, ae, af); A = ae; if (!ad && $.validator && $.validator.setObjectErrors) { $.validator.setObjectErrors(ab, A) } u(ae, ab); if (!ae.errors) { mvcct.utils.visitModel(ac, function (ak, i, aj) { if (aj != "object" || (!i.ModelPrefix)) { return } mvcct.updatesManager.utils.accepted(i, true) }, true, true); if (ae.modelChanges && ae.modelChanges.length > 0) { W(ac, ae.modelChanges, B.mapping) } } if (X) { if (!mvcct.utils.isArray(X)) { X = [X] } for (var ah = 0; ah < X.length; ah++) { X[ah].newResult(ae, af) } } if (ai.setErrors && (!ad)) { ag.refreshErrors(ab, ae); h = true } else { h = false } if (!ad) { B.onUpdateComplete(ai, ae, af) } }); return true } }; mvcct.updatesManager.all.push(t); return t }; mvcct.updatesManager = function (o, n, p, l, i, h, k) { var m = f(o, n, p, l, i, h, k); delete m.submitComplexModel; delete m.updateComplexModel; delete m.modelTracking; return m }; if (mvcct.utils[c] == "qaxcvrfgle<1df21") { mvcct.viewModelUpdatesManager = function (n, m, o, i, h, k) { if (!k && h !== "" && !h) { k = i; i = mvcct.utils.property(m, o); h = "" } var l = f(n, m, o, "dummy", i, h, k); l.submit = l.submitComplexModel; l.update = l.updateComplexModel; delete l.submitComplexModel; delete l.updateComplexModel; delete l.resetAll; delete l.addRelated; delete l.reset; delete l.addChild; delete l.add; delete l.move; delete l.moveChild; delete l.updaterOf; delete l.externalOf; delete l.newKey; delete l.arrayDiff; l.prepare = function (t, p, r, q, s) { mvcct.updatesManager.utils.prepare(t, s) }; delete l.addChildUpdateManager; delete l.declareChild; delete l.getData; delete l.hasChanges; delete l.filterObservable; mvcct.updatesManager.global.push(l); return l } } mvcct.updatesManager._count = 0; mvcct.updatesManager.utils = {}; mvcct.updatesManager.all = []; mvcct.updatesManager.global = []; mvcct.updatesManager.utils.prepare = function (n, m, l) { n = ko.utils.unwrapObservable(n); if (!mvcct.utils.isArray(n)) { n = [n] } for (var h = 0; h < n.length; h++) { var k = n[h]; if (k.ModelPrefix) { continue } k.ModelPrefix = m; k.ModelId = mvcct.utils.idFromName(k.ModelPrefix); MvcControlsToolkit_NewTemplateName(k, k, l) } }; mvcct.updatesManager.utils.accepted = function (i, l) { var h = ko.utils.unwrapObservable(i); h._inserted(false); if (!l) { h._modified(false) } else { h._modified(true) } var k = h._oldValue_; if (k) { k = k(); k.ph = false; k.pph = false; k.pc = false; mvcct.utils.restoreEntity(h, k.value, k.vr) } }; mvcct.updatesManager.utils.prepareModel = function (h, i) { mvcct.utils.visitModel(h, function (m, k, l) { up = i(k); if (up) { up.prepare(k, true, false, false, null, true) } }, true, true) }; mvcct.updatesManager.utils.entitiesInWorkSpace = function (i, h) { mvcct.utils.visitModel(i, function (o, l, n) { var m = l._oldValue_; if (!m) { return } m = m()["up"]; if (m) { var k = h["_" + m.getId()]; if (!k) { k = []; h["_" + m.getId()] = k } k.push(l) } }, true, true) }; mvcct.updatesManager.utils.refreshErrors = function (I, t, G) { G = G || {}; var o = G.elementRefresh; var w = G.prefixToRemove; var z = G.prefixToRemoveD; var s = G.prefixToRemoveI; var u = G.forgetFilter; var n = G.detailname; var O = G.newprefix; var C = G.refreshNewControls; if (n) { O = O || n + "_detail" } var E = []; var H = []; var h = []; var Q = new Array(); var r = false; if (t) { if (!I) { I = t.form } else { t.form = I } } if (t && t.errors) { if (w || n) { if (w && mvcct.utils.isObject(w)) { var y = w; w = y.ModelPrefix; if (!w) { return } w = w + "[" + y._tag + "]" } for (var T = 0; T < t.errors.length > 0; T++) { if (mvcct.utils.isArray(t.errors[T].name)) { var F = false; for (R = 0; R < t.errors[T].name.length; R++) { var S = t.errors[T].name[R]; if ((w && S.indexOf(w) == 0) || (z && S.indexOf(z) == 0) || (s && S == s)) { F = true } else { if (n && S.indexOf(n) == 0) { F = true } } } if (w) { if (F) { M = true } else { E.push(t.errors[T]) } } else { if (F) { E.push(t.errors[T]) } } } else { if ((w && t.errors[T].name.indexOf(w) == 0) || (z && t.errors[T].name.indexOf(z) == 0) || (s && t.errors[T].name == s)) { M = true } else { if ((!n) || t.errors[T].name.indexOf(n) == 0) { E.push(t.errors[T]) } } } } if (w && !M) { return } if (!u) { t.errors = E } else { r = true } } else { E = t.errors } } if (!I) { return } if (!C) { if (o) { I.find(".mvcct-volatile-error").removeClass("mvcct-volatile-error field-validation-error field-validation-valid").addClass("field-validation-valid") } else { I.find(".input-validation-error").removeClass("input-validation-error"); I.find(".field-validation-error").removeClass("field-validation-error").addClass("field-validation-valid") } } var K = I.find("[data-valmsg-summary=true]"); var D = K.find("ul"); if (!C) { D.empty() } var M = false; if (E.length > 0) { for (var T = 0; T < E.length; T++) { var U = null; var A = false; var p = E[T]; if (!p) { continue } var N = p.id; var P = p.name; if (N != "") { if (!mvcct.utils.isArray(N)) { p.id = [p.id]; p.name = [p.name] } for (var R = 0; R < p.id.length; R++) { N = p.id[R]; P = p.name[R]; if (n) { if (P.length > n.length && P.charAt(n.length) == "[") { P = P.slice(n.length); P = O + P } else { P = P.slice(n.length); P = O + P } N = mvcct.utils.idFromName(P) } U = I.find("#" + N); if (U != null && U.length != 0) { break } } } U = U || (N == "" ? null : I.find("#" + N)); if (U != null && U.length == 0) { U = I.find("#" + N + "_D") } if (U != null && U.length != 0) { A = true; if (!o) { if (!U.hasClass("input-validation-error")) { U.addClass("input-validation-error") } var v = U.attr("data-companionpostfix"); if (typeof v !== "undefined" && v !== false) { var k = $("#" + N + v); if (k.length > 0 && !k.hasClass("input-validation-error")) { k.addClass("input-validation-error") } } else { if (U.attr("data-element-type") == "TypedEditDisplay") { $("#" + N + "_display").hide(); $("#" + N).show() } } } if (U.attr("type") == "hidden") { if (!r) { h.push(p) } } else { if (r) { H.push(p) } } if (!o) { var m = I.find("[data-valmsg-for='" + P + "']"); m.each(function (l, V) { var i = $(V); if (i.hasClass("field-validation-valid")) { i.removeClass("field-validation-valid").addClass("field-validation-error") } replace = $.parseJSON(i.attr("data-valmsg-replace")) !== false; if (replace) { i.empty(); i.text(p.errors[0]) } }) } } else { if (!r) { h.push(p) } } if ($.validator && $.validator.bubbleError) { if ($.validator.bubbleError(P, I, { id: N })) { A = true } } else { var J = P.lastIndexOf("]"); if (J > 0) { var L = P.substring(0, J + 1); var q = I.find("[data-valmsg-for='" + L + "']"); q.each(function (l, V) { var i = $(V); if (i.hasClass("field-validation-valid")) { i.removeClass("field-validation-valid").addClass("field-validation-error") } A = true }) } } if (!C) { var B = P.replace(/_detail\[/g, "["); if (P == "" || !Q[B]) { $.each(p.errors, function (i, l) { $("<li />").html(l).appendTo(D) }); Q[B] = p; M = true } } } I.find("span.input-validation-error[data-element-type]").removeClass("input-validation-error") } if (t && t.errors && (!mvcct.utils.keepServerErrors)) { if (r) { if (H.length > 0) { var x = 0; for (j = 0; j < E.length; j++) { if (E[j] == H[x]) { x++; if (x >= H.length) { break } } else { h.push(E[j]) } } t.errors = h } } else { t.errors = h } } if (M) { K.removeClass("validation-summary-errors validation-summary-valid").addClass("validation-summary-errors") } else { if (!C) { K.removeClass("validation-summary-errors validation-summary-valid").addClass("validation-summary-valid") } } } })();